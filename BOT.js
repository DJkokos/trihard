require('dotenv').config();

const tmi = require('tmi.js');

const client = new tmi.Client({    

    options: { 
        joinInterval: 300,
        debug: true, 
        messagesLogLevel: "info"
    },
    connection: {
        reconnect: true,
        secure: true
    },
    identity: {
        username: process.env.username,
        password: process.env.password
    },
    channels: ['veryracc']
});
const got = require('got');

const runTime = new Date().toString()

const humanizeDuration = require("humanize-duration");

const rafkList = new Set() //outside  client.on

const rgnList = new Set()

client.afk = new Map()
const afk = client.afk

client.brb = new Map()
const brb = client.brb

client.gn = new Map()
const gn = client.gn

client.food = new Map()
const food = client.food

client.shower = new Map()
const shower = client.shower

client.wc = new Map()
const wc = client.wc

client.connect(process.env.password).catch(console.error);

var block = false;


client.on("message", async (channel, user, message, self) => {
    if (self) return;


    let array = ["Blue", "Coral", "DodgerBlue", "SpringGreen", "YellowGreen", "Green", "OrangeRed", "Red", "GoldenRod", "HotPink", "CadetBlue", "SeaGreen", "Chocolate", "BlueViolet", "Firebrick"]

    const args = message.slice(1).split(' ')
    const command = args.shift().toLowerCase();
    const size = args[1]
    const size2 = args[0]

    let isMod = user.mod || user['user-type'] === 'mod';
    let isBroadcaster = channel.slice(1) === user.username;
    let isModUp = isMod || isBroadcaster;
    let isBroadcasterUp = isBroadcaster;


    if (message.toLowerCase() === "'commands") {
        if (!block) {
            client.say(channel, `https://github.com/felyp7/juiceb0t`);
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }
    


    if (message.toLowerCase().startsWith("'vanish")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (isModUp) {
            client.action(channel, "Can't timeout broadcaster/moderator.")
            ;return;
        }
        client.say(channel, `/timeout @${user.username} 1`)

    }

    if (message.toLowerCase().startsWith("'echo") && command === 'echo' && user['user-id'] === "162760707") {
        client.color(array[Math.floor(Math.random() * array.length)])
        client.say(channel, `${args.join(" ")}`)

    }
    if (message.toLowerCase().startsWith("'pyramid") && command === 'pyramid') {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            if (size > 40) {
                client.action(channel, 'the maximum size is 40')
                ; return;
            }
            for (var i = 0; i < args[1]; i++) {
                client.say(channel, `${args[0]} `.repeat(i))

                if (i > args[1]) break;
            };
            for (var e = args[1]; e > 0; e--) {
                client.say(channel, `${args[0]} `.repeat(e))

                if (e < 0) break;
                block = true;
                setTimeout(() => {
                    block = false;
                }, (30 * 1000));
            }
        }
    }

    if (message.toLowerCase().startsWith("'spam")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            if (size2 > 80) {
                client.say(channel, 'the maximum size is 80')
                 ;return;}
            for (var i = 0; i < args[0]; i++) {
                client.say(channel, args.slice(1).join(" "))

                if (i > args[0]) break;
            }
            
            block = true;
            setTimeout(() => {
                block = false;
            }, (30 * 1000));
        }
    }

    if (message == "'artixw") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⣋⠄⠄⠄⠄⠄⠄⠄⠄⠄⢹⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠿⠿⠛⠛⠓⠄⠄⠐⠲⠦⣿⣿⣿⣿⣿⣿⣿⣿⡿⠄⠄⠄⠄⠄⠄⣀⣀⠄⠄ ⣀⣀⣀⣀⡀⣀⠄⠄⠄⠄⣹⣿⣿⣿⣿⣿⣿⡟⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⣿⣿⣿⣿⣟⡛⣃⣀⣀⣾⣿⣿⣿⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠇⠄⠠⠤⠄⠄⠄⠄⠄⠄⠠⠤ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⣿⣿⣿⣿⡿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣀⣤ ⣿⡿⠋⠄⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠘⠻⠿ ⠉⠄⠄⠄⠄⢼⡿⣿⡿⣿⣿⣿⣿⣿⣿⠿⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⢀⣀⣀⡀⠄⠄⠈⠉⠉⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠈⢻⣿⣿⣿⣿⣶⣦⣀⣀⣄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⣀⠄⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣀⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⠂⠄⠄⠄⠄⠄⠄⠄⠄ `);
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'xqcl") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⣿⣿⣿⣿⠿⠛⣛⣛⠛⠿⣿⣿⡿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⠋⢁⣾⣿⣿⣿⣿⣷⣦⣭⣶⣿⣿⣿⣷⣄⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⡿⠁⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣜⢿⣿⣿⣿⣿⣿⣿⣿⣿ ⢀⣤⣤⠉⠄⣀⣀⣀⠈⠉⢙⣿⣿⣿⣿⠛⠋⠉⠉⠉⠄⠙⣿⣿⣿⣿⣿⣿⣿ ⢸⡿⠛⠁⠄⠄⠄⠄⠄⠄⠄⢹⣿⣿⠋⠄⡄⠈⠉⠙⠻⡆⢹⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣶⣦⣤⡤⠄⣀⣠⣼⣿⣿⣦⣀⣤⣤⣤⣴⠖⣠⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢉⡙⣿⣿⣿⣿⣿⣿⣿⡇⢿⣿⣿⣿⣿⣿⣿⣿⣿ ⠙⣿⡿⠛⠿⠿⠿⠿⠿⣧⠉⣹⣿⣿⣿⣿⣿⣿⣿⣿⡌⢿⣿⣿⣿⣿⣿⣿⣿ ⠄⠘⠿⠷⠤⢄⣀⡀⠄⢀⣀⣀⣉⣁⣈⣉⣉⣉⣉⡛⢁⣾⣿⣿⣿⣿⣿⣿⣿ ⣀⣤⣤⣤⣤⣤⣀⠉⠻⢿⣿⣿⡿⠿⠿⠿⠿⠿⢋⣥⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠉⢁⣤⣴⣶⣶⣦⣄⡀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⡿⠿⢿⣿⣿⣿⣿⣿⣷⡄⠈⣿⣿⣿⣿⣿⣿⣷⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿ ⢀⣤⣶⣤⡈⠹⣿⣿⣿⣿⣿⠟⠉⣉⠙⠻⣿⣿⣿⠁⠄⣾⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⡿⠛⢁⣰⣿⣿⣿⣿⣿⠄⢻⣿⣿⡆⠈⢻⠇⠄⢰⣿⣿⣿⣿⣿⣿⣿⣿ `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message == "'xqctf") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⣿⡿⡿⠐⢭⣭⣴⣿⣿⣿⡿⠿⢿⣿⣿⣿⣿⣿⣿⣷⣤⣤⡉⠉⠡⠤⢿⣿⣿ ⠛⠏⠄⢀⣿⣿⣿⣿⣿⣿⣦⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠈⠉⠙ ⠄⣤⣴⣿⡿⠛⠋⠉⠄⠄⠄⠄⠉⠛⢯⣽⡿⠿⠿⠿⠛⠛⠻⠿⡿⠛⠂⠄⠈ ⣤⠛⠉⢻⡀⣠⣴⣶⣶⣤⣤⣤⣤⣴⣶⣦⣤⣤⣤⣤⣤⣤⣠⣴⣿⣶⣤⠄⠄ ⣿⡀⠄⠈⠉⠄⠄⠄⠄⠉⠉⠉⠉⠛⣿⣿⣿⡟⠋⠉⠉⠉⠙⠛⠛⠄⠄⠄⠄ ⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣠⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⢀⣀⣀⠄⠄ ⣿⡏⠄⣾⣿⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄ ⣿⣿⠄⢹⣿⣿⣿⣿⡿⠟⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠄⢰ ⠁⠄⠄⠨⠉⠻⣟⠄⠄⠰⣿⣛⣋⣀⣈⠙⠛⠛⠛⠛⠛⢛⣻⣿⣿⠙⡇⠄⢸ ⣷⣀⡀⠄⠈⢷⣿⣶⣤⣄⡿⣿⣿⣿⣿⣿⣿⣷⣶⣾⣿⣿⣿⣿⣿⣦⣧⡄⠸ ⣿⣿⣷⡀⠂⠄⠙⢿⣿⣿⣿⣷⣬⣍⣽⣿⣿⣿⣿⠿⢿⣿⣿⣽⣿⣿⣿⣷⠄ ⣿⣿⣿⣿⣶⣆⣀⣀⠉⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄ ⣿⣿⣿⣿⣿⣿⣿⣤⠐⢀⣀⠈⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⢀ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⡒⠒⢀⣀⠈⠉⠛⠻⣿⣿⣿⣿⣿⣿⠛⠁⢀⠄  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'xqcs") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⣿⡏⠄⠄⠄⠄⠄⠄⠈⠉⠄⠉⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⠟⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⠉⠉⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⠄⠄⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋ ⠄⠄⠄⠄⣀⣀⣀⡀⠄⠄⠄⣷⠄⠄⠄⠄⠄⠄⠉⠻⣿⣿⣿⣿⣿⡟⠁⣠⣾ ⠄⠄⠄⢀⣿⣿⣿⣿⣦⣴⣶⣤⣄⡀⠄⠄⠄⠄⠄⠄⣀⣹⣿⠟⠉⢠⣾⣿⣿ ⠄⠄⠄⠰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣤⣀⣀⣤⣿⣿⣿⣶⠄⣼⣿⣿⣿ ⠄⠄⠄⠄⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠄⣿⣿⣿⣿ ⠄⠄⠄⠄⠙⢿⣿⣿⣿⣿⣿⡿⠟⠛⠛⠛⣿⣿⣿⣿⣿⣿⡟⢁⣼⣿⣿⣿⣿ ⠄⠄⠄⢀⣤⡤⠯⠭⠽⣿⣭⣤⣄⠄⣤⣾⣿⣶⣿⣿⣿⣿⡇⢸⣿⣿⣿⣹⣿ ⠄⠄⠄⣿⣿⣧⣠⡦⣀⣈⠙⠻⣿⣇⠙⠛⠿⠿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿⣿ ⠄⠄⢸⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⡇⢀⣀⡀⠙⠛⠛⣡⣿⣿⣿⣿⣿⣿ ⠄⠄⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣹⣿ ⠄⠄⠄⠈⠿⣿⣿⣿⣿⣿⣿⣿⡿⠁⣴⣿⣿⣯⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

   


    if (message == "'alienpls3") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠁⣤⠙⢿⣿⢟⡉⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡄⠄⠄⠄⢸⡏⠈⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡻⣆⢤⠤⣿⡧⣄⣀⡔⣫⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣌⠓⠖⢒⣁⣵⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠚⣿⣷⣶⣿⡿⣾⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣧⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣯⠛⠛⠟⠻⣯⣿⡗⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣛⢈⣷⡦⡖⣶⣶⢛⣡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢘⣛⠳⣻⢋⣛⡛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣛⣻⣛⣝⣿⣿⣃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠛⢛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⢿⣷⡂⢊⡉⠉⢻⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⡇⠄⠉⠈⣟⠄⠈⠁⠄⢈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣯⢄⡀⣠⣿⣄⡀⢀⣠⣿⡿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣹⣯⣭⣥⣿⢿⡛⣽⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣯⣾⣿⣿⣿⣯⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣧⠺⣿⣿⠿⠿⢿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢹⣿⣯⠉⠂⣶⣿⡟⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⡇⣆⡙⢿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣽⣯⣾⣿⢁⢉⣻⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣙⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⣿⣿⡿⢛⡛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⡏⠄⠓⢹⡟⠄⠙⠁⠄⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣧⠄⠄⠸⡇⠄⠄⠄⣠⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡣⢀⣂⠄⠄⠄⠠⣐⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣢⣤⣀⣠⣾⣾⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢹⣿⣿⣿⣿⡉⢻⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣿⣿⣿⣿⣿⡇⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⣧⠄⠄⡀⠙⣿⠿⣿⢺⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼⣿⣷⣼⡧⠛⢳⢠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢘⣻⣿⢹⢁⣁⣹⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣛⣿⣻⣾⣯⣭⣭⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⣄⢹⣿⠟⣡⠄⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠄⠄⣸⣿⠄⠁⠄⠄⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡽⣶⡚⠿⠿⣦⣤⣤⣾⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡋⠓⠒⠁⠄⢀⣰⣭⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⣠⣴⣿⣯⣝⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠿⠿⠿⠄⢹⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⣂⠄⠄⠄⠄⣠⢵⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣦⣀⢠⡀⣠⣿⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⢸⢷⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣛⣻⢸⡌⢀⠹⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣜⣛⣛⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡋⢠⡌⢿⣿⢋⡤⠄⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⠄⠄⠄⣼⣇⠄⠄⠄⢀⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣷⢶⡚⠿⠟⣷⠶⠶⠿⡿⣻⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣅⢈⠓⠊⠁⡀⣀⣬⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣫⡿⣿⣶⣄⣴⣿⣯⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣱⣿⡇⠙⠿⢿⡿⢟⣦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⡟⣿⣿⣿⡇⠄⠄⠄⠰⠿⢿⣿⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣧⣯⣭⣽⢹⣄⢀⣠⡀⢀⣤⡭⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⠟⣿⡇⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣘⣛⡐⣿⡿⣉⣉⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣭⣽⣷⣿⣿⣾⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿⣿⡟⢋⡍⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠄⠰⢸⡏⠄⠈⠁⠄⣿⣿⣿⢾⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠄⣸⣧⡀⠄⠄⣼⣿⣿⡿⣾⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡳⢌⣋⡨⠉⠈⠉⢁⣦⣾⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣴⣦⣀⣀⣴⣾⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢰⢸⣿⣿⠏⣽⣿⣿⡷⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣸⢸⣿⣿⠄⠛⠛⢟⣵⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡈⡁⠈⠄⠄⠄⣴⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⢺⢦⣌⠖⣾⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⣀⠙⡗⠛⠛⣧⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣭⣭⣴⢿⣿⠿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠤⡿⠁⠐⠋⠄⣿⣿⣿⣿⢻⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⢀⣇⠄⠄⢀⣰⣿⣿⣿⣿⣼⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢟⠛⢳⢶⠟⠛⠋⡉⢝⣵⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣉⠁⠄⣀⠰⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣽⢿⠞⣺⣿⡿⠾⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣮⣥⣶⣮⣦⣕⣦⣀⣀⣸⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡱⣯⠁⠙⣿⣿⣿⢏⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣬⡧⡐⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣾⣯⡿⢿⣷⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡧⣶⣿⡿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠫⠠⣿⠋⠄⠖⠘⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠄⡇⠄⠄⠄⢰⣿⣿⣿⣿⣹⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼⡃⠄⠄⠄⠈⠉⠉⢩⣫⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣯⣁⠄⢀⢠⡴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⡟⢻⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿⠐⣿⣏⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡘⡍⠉⣿⣿⣴⣿⣿⢾⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⡆⢠⣿⣿⡗⣀⣭⣾⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢠⠘⠛⢿⣇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣝⡳⣷⣿⡿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⢩⡿⠋⠠⠆⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⢀⡇⠄⠄⠄⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢿⠟⡒⠒⠈⠉⠉⠛⡹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡋⠄⠄⠄⢠⣠⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠓⠉⠄⣲⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣧⣻⣩⢞⣯⣿⣿⠟⠉⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⢿⣿⡿⠟⣴⣶⣷⢟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⢀⢸⣯⣿⣵⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢶⣾⢟⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡿⣿⣿⡿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠒⣿⠏⠐⠓⠄⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⣠⣯⠄⠄⠄⣠⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢋⣋⠁⠄⠄⠁⠈⢁⣩⣾⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⣴⣄⣠⣰⣴⡾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣱⣿⣿⣿⣿⠙⣿⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢹⡿⣿⣿⣿⣁⠘⣟⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣬⠄⠄⢨⣿⣥⣤⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢿⣦⡞⠿⣿⡇⣶⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣼⣿⠠⣎⣉⣯⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣶⣽⣿⣿⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠰⠆⠸⣿⢫⠄⠄⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣇⠄⠄⣸⣯⠄⠄⠄⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣝⠉⢧⣙⣋⠵⠖⡚⢏⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡟⠛⡆⠄⢀⣤⡶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⣿⡄⠈⠻⠿⢛⣻⣮⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣙⣉⡛⣿⠄⠄⢰⣿⣿⡏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣄⢀⡀⡈⣹⡱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡿⢿⢸⠉⠁⢻⢱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣷⣬⣿⣿⣷⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡿⢛⠛⢿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠙⠁⠈⣿⠣⠆⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⢿⠧⣀⣀⣴⣿⡄⠄⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣅⠄⠱⠬⠍⠜⢛⣩⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣽⣿⣦⣤⣾⣾⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢱⢠⣿⣿⣿⣿⣷⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⢳⣏⣸⡛⠻⠿⠿⢿⡷⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣬⡽⣷⣤⣤⢠⣾⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢱⢿⣿⠟⠘⠻⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠸⣼⣼⣆⣒⣣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿��⣿⣿⣿⣿⣿⣿⣿⣷⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⡏⠰⠆⠈⢻⣿⡋⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣷⠄⠄⠄⣸⡏⠁⠄⣽⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣅⠈⠙⢶⡚⠛⢻⡤⣲⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣯⣦⣀⠈⣭⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣾⣟⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣹⣿⣿⣿⣿⠙⢻⢏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢛⠛⣫⣅⠄⣼⡎⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠎⣿⣿⢿⣀⡈⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣾⣬⣇⢿⣾⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢹⣿⠃⠲⠂⠙⣿⣟⠉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣸⡿⢇⠄⠄⢀⣿⡀⠄⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣍⡄⠄⠄⣙⣛⣳⢖⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣻⣶⣄⣈⣭⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣼⣿⢹⣿⣿⣿⢿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣽⣿⡍⢿⣿⡿⢲⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡜⡿⠿⣧⣤⢤⡄⣾⣾⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣗⣇⠄⣨⢇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢹⣬⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡿⢋⡛⢿⣿⣿⠟⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣹⡇⠄⠁⠄⣻⠃⠃⠄⢈⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡻⣤⣀⣴⣿⣦⣀⣠⢾⣾⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢮⣹⣶⣶⣾⡫⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢡⣿⣿⣿⣿⣿⣿⣮⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣸⣿⣿⣿⣿⣿⣿⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⢛⣍⠛⠻⣿⣿⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣇⣿⡿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠸⣭⢿⡯⣿⣷⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⠟⠛⢿⣿⡿⠛⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢎⠄⠉⠄⣿⠄⠉⠄⢀⣿⣹⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣜⢆⣀⢴⣿⣦⣀⣤⣾⢟⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣝⣷⠶⠾⣿⣭⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⢴⣿⣿⡿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡦⣩⣭⣀⠈⠛⡟⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡸⣿⣿⡙⠛⣿⣇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣻⣿⣼⡇⢿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣡⣽⡎⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⡞⢉⡉⢻⣿⡿⠛⠻⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠄⠁⢸⡟⠘⠁⠄⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡻⣦⡴⣿⠿⣄⣠⣴⢿⣾⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⣝⠒⣚⣟⣭⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢱⣿⣿⣿⣿⣿⣮⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣸⣿⣿⣿⣿⣿⣟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠵⢹⡟⠛⠛⠻⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢿⣿⣗⠇⠾⡿⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢘⣻⣗⢉⣧⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣟⣛⣫⣬⣭⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⢡⡈⠹⣿⡿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢼⣿⣆⠄⠄⢀⣿⠐⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡙⠻⣷⣞⠻⠿⣧⣤⣴⣹⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣆⣝⠻⢿⣿⣿⣩⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡱⢿⣿⣿⠅⠙⠿⢿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⢩⣽⣶⣶⣴⣳⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣼⡿⠿⢿⣿⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢷⣿⣿⣶⡸⠛⢛⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣬⣿⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢩⡍⠙⣿⣿⠟⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡼⣿⣇⠄⠄⠄⢸⡟⠃⠄⢸⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣜⢿⢶⣤⠴⣿⢷⣀⡠⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣰⡙⠳⢶⠫⣽⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢻⣿⣿⣿⣿⣿⡎⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢇⣿⣿⣿⣿⣿⣿⢿⡹⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⢻⠏⠉⠻⢿⣿⣿⣾⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠔⢶⣸⣶⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣆⣸⣿⣿⣿⢼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣞⣿⣿⣣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿   `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'thejungle") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `The Jungle isnt just a place; its a sanctuary where we put our problems aside and enjoy watching the gaming warlord juicer. Youve changed more lives than you think Mr. Cow, xqcL   `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }



   
    if (message == "'tf") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡿⠛⠛⠛⠛⢛⡛⠛⠛⠛⠛⠛⠛⠛⠛⠿⠿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⡿⠋⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣤⣉⠛⢿⣿⣿ ⣿⣿⣿⢁⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⣿⣿ ⣿⠟⢁⣚⣻⣿⣿⣿⡟⢁⣀⣀⡲⢦⡝⢿⣿⣿⠿⠛⠉⠉⣙⣻⣿⣿⣷⣌⠻ ⢁⣴⡿⣩⣶⠶⣭⣝⣛⣛⣭⣿⣿⣷⣶⣿⣿⣿⡆⢾⣿⣿⠿⠟⣻⣟⣿⣿⡆ ⠈⣿⣇⣿⣭⠰⣮⣍⡛⠿⢿⣿⣿⡏⣼⢿⢿⣿⣿⡶⣉⣻⣿⣿⠏⢻⣿⣿⠃ ⣦⡈⢻⣿⣿⣧⡈⣝⡉⠻⢷⣶⡌⣩⣛⣛⠻⠿⠥⠾⠿⡛⢋⣁⣄⢸⣿⠃⣼ ⣿⣿⣆⢹⣿⣿⣷⣍⠳⣶⣶⣤⢀⣙⠛⠛⠉⠛⠛⠘⠛⠛⠉⠁⠄⢸⣿⠄⣿ ⣿⣿⣿⣦⡙⢿⣿⣿⣷⣮⣙⠛⢼⣿⣿⡇⣶⣶⡆⣤⣤⣠⠄⡤⠄⣼⣿⠄⣿ ⣿⣿⣿⣿⣿⣦⣈⠛⠿⣿⣿⣿⣷⣶⣮⣥⣬⣭⣥⣭⣤⣤⣶⣶⣿⣿⣿⡄⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣌⡙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣬⣍⣉⡛⠛⠿⠿⠿⠿⠿⠿⠛⣁⣼⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿

        `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }



    if (message == "'spider") {

        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⣿⡿⠏⣩⣷⣟⣁⠄⢸⣷⣿⡇⣀⢹⣿⠄⠄⣈⠻⣷⡍⠿⠿⢿⣿⣿⣿⣿⣿ ⣿⡇⣿⢟⣹⣿⣷⣞⣁⠶⣹⡇⣿⢸⣿⣿⡇⠿⣶⣶⣈⠻⣷⡌⢹⣿⣿⣿⣿ ⣿⣷⣶⣾⣿⣿⣿⣷⣿⢸⠟⣁⣿⣘⣃⣘⢻⣇⣿⣿⣿⣷⣶⣶⣾⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣶⠻⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣏⣩⣥⣿⠟⠛⠃⣀⣀⣀⣴⣦⠹⢿⣷⡍⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⡏⣽⢿⣟⡱⠖⣠⣾⠟⢿⡟⣛⢿⣿⣄⠄⣘⠣⡍⠿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣷⣶⣾⣿⣇⣘⣛⣁⢠⣾⡇⣿⣘⣛⠛⢧⣍⠄⠹⣷⣍⠹⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⡇⣶⣿⣿⣿⣶⣘⢻⡇⣶⣈⠻⡷⢸⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣷⣶⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⡿⠿⠿⠏⣡⣴⣿⡿⠏⠄⠄⠄⠄⣴⣶⣄⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⡏⣥⣿⢟⣛⣛⣁⠶⢀⣶⣶⡦⢴⣦⣿⡟⢹⣷⣍⠿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣷⣶⣶⣾⣿⣿⠿⣰⡟⣿⡇⣶⣘⣛⢿⣧⡀⠘⢻⣆⠿⠿⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡿⠇⣾⡏⠄⣿⡇⣿⣿⣿⣶⣘⢻⡇⣶⣈⠻⣿⢸⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡇⣰⡟⣃⣘⣛⣃⣿⣿⣿⣿⣿⣶⣶⣿⣿⣷⣶⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣇⣻⣃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿��⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⡿⠿⠟⢉⠸⠿⠃⠄⠄⠄⠄⠙⣧⡍⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⡏⣭⣿⣧⣾⢟⣛⠄⣠⣄⣀⠄⠄⠄⢾⡿⢻⡄⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣷⣶⣿⣷⣶⣾⣿⢸⣿⣿⡟⣃⢠⣶⣄⠶⣶⣈⠳⣍⠿⠿⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⣸⠇⣿⣧⣿⣘⣛⢻⡇⠿⣿⣶⣈⠻⡷⢸⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⡇⣾⡇⣶⣙⣃⣿⣿⣿⣶⢸⣷⣍⣿⣿⣷⣶⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡏⣡⡟⣁⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡇⢿⠇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣷⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⡿⠏⣩⣭⣭⣤⣄⠄⠄⠄⠄⠄⢠⡄⠘⣃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⡏⣥⣾⡟⠑⣠⡽⠛⢳⡄⠄⠄⠄⠄⢠⣤⡍⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣷⣆⣙⣛⣛⣛⣁⢠⣶⣶⣄⠄⠄⡀⢸⡿⠣⣭⣍⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⠉⣼⣿⣿⡏⣀⢹⣿⣄⠶⣶⣈⣛⠳⡌⢹⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⣸⡟⣿⣿⣶⣿⢸⡿⢻⡇⣿⣿⣿⣷⣶⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣧⣾⣟⣁⣿⣿⣿⣿⢸⣷⡜⢣⣍⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡏⣡⣿⠇⣿⣿⣿⣿⣿⣶⣶⣶⣘⢻⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣇⣙⣁⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣈⣃⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠘⠃⠄⠄⠄⠄⢸⣇⠿⠿⢉⣽⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣟⣛⣛⠛⣶⡄⠄⠄⠄⠄⢸⣿⠛⣛⣛⣋⣹⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⡿⠿⠿⠿⠿⢩⠼⢿⡇⠄⠄⠄⠄⢸⣿⣷⣍⠿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⡏⢡⢚⣛⣛⣛⣁⢠⣤⣶⡄⠄⢠⡄⢸⡿⣛⣛⠣⣭⣭⡍⢹⣿⣿⣿⣿ ⣿⣿⣷⣶⣾⣿⣿⣿⠿⣸⣿⣿⠇⣀⣀⢠⣶⡄⠿⣿⣶⣶⣶⣶⣾⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⣾⣟⣁⣶⣶⣿⣿⢸⣿⣿⣇⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣧⣾⣟⣁⣿⣿⣿⣿⣿⣈⠻⡟⠻⡇⠿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣧⣙⣁⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⠰⣷⡍⢹⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣈⣃⣸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⡿⠿⣿⣘⢿⣷⡄⠄⠄⠄⠘⠛⠃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡿⢿⣦⣭⣉⣸⡿⠃⠄⠄⠄⢸⡇⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣷⣶⣶⣙⣛⠉⢠⡄⠄⠄⠄⠘⢣⣭⣭⣭⡍⠹⠿⢿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⢩⣼⠃⠄⠄⠄⠄⢠⣾⣿⣿⣄⢀⣿⡷⢸⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⢩⣾⣿⣿⣷⡄⠄⢠⣤⣿⡏⣈⣛⣛⣋⣰⣾⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡿⠇⢸⠟⣡⣼⠟⢻⡟⣀⢸⣿⣿⡇⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⡿⠇⣸⣦⣾⣿⣷⣼⣿⣁⣿⣈⠻⣿⣿⡇⠿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣇⣘⣛⣛⣉⣿⣿⣿⣿⣿⣿⣿⣶⣶⣈⠻⣧⡍⢹⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⠈⣷⡌⢹⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⢸⡇⠄⠄⠄⢸⣿⡿⣃⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⡟⢿⣿⣯⣾⡿⣦⣾⣇⠄⠄⠄⢠⡿⠃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣷⣶⣯⣙⢻⠄⢼⡿⠿⠃⠄⠄⢠⡄⠶⠿⠿⠿⠿⠿⢿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⠄⢠⡄⠄⠄⠄⠄⢠⡖⣛⣛⣛⣛⣃⣸⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⠿⢩⣾⣿⣄⠄⠄⠄⠄⢸⣷⣍⠿⠿⠿⠿⢿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⢸⠟⠛⠛⣿⣇⠄⢠⣤⣾⡟⣛⣛⣛⣛⣃⣸⣿⣿⣿⣿ ⣿⣿⣿⣿⡿⠯⣷⣞⠄⣶⣾⣿⢻⡟⠁⠸⣿⣿⡇⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣇⣘⡛⢡⣾⠿⣿⣿⢸⡟⣀⣶⣾⣉⠻⣷⣍⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣿⣿⢸⠇⣿⣿⣿⣿⣶⣈⠻⣷⡌⢹⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⣶⣶⣶⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢩⣭⣭⣭⡍⠿⢸⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⡟⢩⣿⣯⡉⣸⡏⠉⠉⠉⢹⣿⡿⣃⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⡏⢩⣭⣹⡶⣿⣙⢿⣿⣇⠄⠄⠄⢠⡿⠃⣿⣿⣿⡿⠿⢿⣿⣿⣿⣿ ⣿⣿⣿⣷⣆⣙⡿⢯⣭⡉⠘⠛⠿⠃⠄⠄⢸⡇⠄⣉⣭⣭⣵⡷⢸⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣶⣙⣛⣃⢸⡇⠄⠄⠄⢠⡄⠘⣋⣀⣶⣶⣶⣾⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⢩⣭⣼⡇⠄⠄⠄⠄⠘⢣⡍⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⡿⠿⣟⣩⣭⠘⣛⢻⣷⣤⡄⠄⠄⠄⢸⣷⣍⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣇⣘⣿⣟⣁⣶⣿⢸⣿⣄⠘⠻⣿⣿⣷⣌⠻⣷⣌⠹⢿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢩⣼⠟⢻⡇⣶⣾⣷⣈⠻⣷⣼⣿⡷⠸⢿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼⡇⣶⢸⡇⣿⣿⣿⣿⣶⣶⣶⣶⣆⣃⣸⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿⡇⣿⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣛⠻⠃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⡟⢩⣭⡉⣿⠿⢩⣭⣭⣭⡍⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣶⣿⢯⡉⢸⡏⠄⠄⠄⢹⡇⠿⠿⠉⡍⢹⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣘⢿⣿⣇⠄⠄⠄⢸⣷⡔⠛⠃⠂⣼⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣘⠛⠛⠃⠄⠄⠘⢿⣷⣴⡿⣃⣸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⠿⣩⣍⠄⠘⠃⠄⠄⢠⡄⠄⠶⣶⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡏⣡⣾⡟⠛⢿⣷⣶⡄⠄⠄⠄⢹⣿⣷⡍⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡇⢿⣧⣾⠟⣋⢹⣿⣄⠄⠄⣠⣶⡟⠛⠧⣍⠹⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣷⣶⣶⣶⣶⣿⢸⣿⣿⡄⣘⢻⣿⣷⣤⣤⣼⣷⣌⠹⢿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⡇⢸⡇⣿⢸⣏⠶⣶⣶⣶⣶⣆⡳⣬⢹⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢩⣾⡇⣶⣶⣿⣶⢸⡇⣿⣿⣿⣿⣿⣷⣶⣾⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⡇⣶⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⡟⢩⡉⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣧⣘⣿⡦⠿⠿⢩⡍⠉⢩⡍⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣙⢿⡆⢸⡇⠄⠄⠄⢸⡇⢉⣭⣍⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣘⢻⣿⡇⠄⠄⠄⢸⣿⡿⠛⠻⣿⡿⢋⣸⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⢹⣇⠄⠄⠄⠘⢿⣷⡔⣃⣶⣶⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣯⣿⣿⣯⣭⣭⣼⡿⠃⠄⠄⢠⡄⠄⠶⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⡏⢡⣹⡿⣷⣠⡜⢿⡇⠄⠄⠄⠄⢸⣿⣷⣍⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣷⣖⣿⣟⣿⣟⣁⢸⣷⣤⣄⠄⠄⣸⡇⣈⠻⣷⣬⣍⠹⢿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⡟⣛⢻⣿⣧⣍⠶⣶⣎⡻⣷⡌⢹⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣸⡟⣛⣃⣿⠸⣿⡜⠻⣷⣍⠹⢷⣶⣶⣾⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⡟⣁⣿⣿⣿⣶⠸⡇⣶⣈⣛⣃⣸⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⠇⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⢸⡆⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⢸⣧⡉⣿⢩⣭⣭⣭⡍⠿⠿⢿⣉⣍⢹⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣶⢹⡇⣩⡼⠋⠉⠉⢹⣷⣴⡿⣿⣋⣸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣘⢿⣿⣇⠄⠄⠄⠘⢿⡏⣶⣿⡿⠿⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡏⢩⣭⡉⠿⠄⢹⣿⠃⠄⠄⢠⡞⠃⢉⣭⡄⢛⣋⣹⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣷⣦⣙⣛⢿⣶⣾⡿⠃⠄⠄⠄⢠⣖⠛⣋⣶⣾⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⠶⣹⡇⠄⠄⠄⠄⢸⣿⣷⣭⣍⠹⠿⠿⢿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢸⣿⣷⣶⣄⠄⣠⣤⢹⡏⣈⣛⡻⣿⣷⡌⢹⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⢩⣾⠇⢠⣿⣿⡟⣛⣛⢻⣤⡄⣿⣿⣷⣶⣶⣶⣾⣿⣿ ⣿⣿⣿⣿⣿⡿⠟⢩⠘⣁⠶⢸⡟⣃⣶⣿⣿⢸⣿⣷⣍⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡇⢾⠄⣶⣿⣾⣿⣁⣿⣿⣿⣿⣈⠻⡿⠻⡇⠸⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣷⣶⣶⣿⣿⣙⣁⣿⣿⣿⣿⣿⣿⣶⣶⣶⠄⣷⢸⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⢩⡍⠿⠿⠿⢼⣿⣛⣸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⡿⠋⠄⢰⣇⣰⡿⣋⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡏⢩⡉⠿⣩⡉⠿⢸⡇⠄⠄⠄⣹⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣇⡘⢿⣿⡟⣿⣦⣼⡇⠄⠄⠘⢿⡏⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣶⣙⣛⢿⠿⠋⠄⠄⠄⠘⢣⣤⣭⣭⣭⣍⠹⠿⠿⢿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⠄⠘⠃⠄⠄⠄⢠⣿⢿⡿⠌⠛⠻⣿⡷⢸⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠉⣸⡇⠄⠄⠄⠄⠄⣹⡏⣈⣛⣛⣃⣰⣶⣾⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⠿⣩⡜⠛⢣⣾⣿⡇⣈⢻⣿⣇⠿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⣾⣟⢣⣾⣿⣛⢻⡇⣿⠸⣿⣿⣇⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⡇⢸⡏⣿⣘⣉⣿⣿⢸⡇⣿⣶⢸⡿⠻⣧⠈⢹⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⡿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢩⣾⡿⢸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢩⣭⣭⡍⠿⢉⣽⡿⣶⣾⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⠿⣿⢸⡇⠄⠄⢸⣷⣼⡏⣶⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣇⡘⢠⡘⢿⣦⡉⢸⡇⠄⠄⢠⣿⡿⠃⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣧⣘⣿⣦⡀⢸⡿⠃⠄⠄⠘⢿⡇⠶⠿⠿⢿⣿⠿⢿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣙⣛⠛⢷⡄⠄⠄⠄⠘⢷⣶⡿⣛⣻⣿⡃⠸⢿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢠⣼⠃⠄⠄⠄⠄⢸⣿⣷⣭⣭⣭⡥⢃⣸⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣠⣾⣿⠃⠄⠄⠄⣠⣶⣄⠄⣶⣶⣶⣶⣾⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⣩⣾⡟⠁⢸⣷⣾⡇⣘⢻⣿⣿⣇⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⡇⣾⡟⣁⣘⣛⣛⣃⢸⡇⣿⣈⢻⡿⢻⣷⢸⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⠿⣿⣿⣴⣷⢼⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⡿⠿⢉⡔⠛⠛⢻⡇⠿⠻⡿⣿⣾⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣶⣙⢻⣦⣼⡇⠄⠄⠄⢸⣿⡇⣶⣿⣿⡿⠿⠿⢿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣘⢿⣿⣧⠄⠄⠄⢸⡿⠃⠿⢋⣭⣥⣿⢃⣸⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠶⠙⢻⣦⠄⠄⠘⠟⡘⠟⣋⣰⣶⣶⣾⣿⣿⣿ ⣿⣿⣿⣿⣿⡿⠟⣩⣭⣭⣭⣾⣷⣀⡁⠄⠄⠄⠘⢧⡄⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣇⣘⣛⠁⠶⠄⠙⢿⣿⣟⡀⠄⠄⡀⢠⣷⣆⠸⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⣃⠄⠻⠿⣿⣶⣾⣿⢸⣿⣌⡳⣌⢹⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣾⣦⣿⣿⣿⣿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⢩⡔⠛⢣⡍⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣙⢿⡆⣸⣧⠄⠄⠄⢸⣇⢉⣭⣍⠹⢏⣭⢹⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣘⢿⣿⡿⠄⠄⠄⢸⣿⣿⠛⣿⡿⢋⣰⣾⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⠄⠁⡀⠄⠄⠄⠙⡿⠟⣋⣰⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⣩⣭⣭⣭⣄⡺⠟⠄⠄⠄⠘⠇⡀⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⡇⣾⡟⣁⣶⠙⠿⣷⣦⠄⠄⠄⠄⢸⣿⣷⣌⢹⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣙⣿⡦⠿⣿⣿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣙⢿⡆⣿⢩⣴⠿⠂⢩⡍⠿⢿⣿⠿⠿⠿⢿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣧⡍⠄⠁⠄⠄⠘⢧⣴⡿⣿⡃⢀⣿⢸⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⠙⢿⣷⣦⠄⠄⠄⢸⡏⠶⢋⡵⢋⣰⣾⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⣿⡿⠿⠶⠘⢻⣧⠄⠄⠄⠘⣿⡶⣋⣰⣾⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣧⣘⣿⣟⣛⢿⣷⣾⣿⠄⠄⠄⠘⢧⣄⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢩⣭⣭⡍⠿⠿⢴⣿⣃⣸⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⠉⠉⠙⢧⣤⣾⣋⣸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⢩⡍⠿⢸⡿⠄⠄⠄⢸⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣧⣘⢿⣦⡜⣛⢣⣤⣤⣦⠄⠄⠘⠋⣀⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢰⣿⢃⣸⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢩⣭⡍⠿⠿⢸⣿⢸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣿⣿⠿⠘⠟⠉⠹⢧⣤⣾⣋⣸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣧⣘⣶⣿⣿⣯⡍⢸⣷⠄⠄⠄⠈⠹⠏⣿⣿⣿⣿⣿⣿⣿⣿ `)
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢰⣷⢸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⢸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢩⣭⡍⠿⢉⣼⣿⢸⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢩⣼⠟⠉⠁⢠⣼⣿⠏⢸⣿⣿⣿⣿⣿⣿ `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'okayeg") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠉⠉⠉⣩⡏⡘⣯⡈⠙⢿⣿⣛⣩⣤⣤⣭⣽⣿⣿ ⣿⣿⣿⣿⣿⣿⡿⠛⠉⠄⠄⠄⠄⠄⢿⡇⢡⣿⣿⣦⠈⠑⣿⣿⣿⠉⣿⣿⣿⣿ ⣿⣿⣿⡿⠿⠋⠄⠄⠄⠄⠄⠄⠄⠄⠄⠉⠚⠿⢿⡿⠄⠄⠉⢿⣟⠄⣿⣿⣿⣿ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠹⠾⠿⠋⠄⣿ ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢸ ⢠⣶⣶⠢⣄⣀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢸ ⠘⢿⣿⣷⣮⡹⣷⣦⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠘ ⠄⠄⠈⢿⣿⣿⣎⡛⠿⣷⣦⣀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⣦⣤⣀⠄⠈⠛⠿⣿⣷⣮⣍⣛⠿⢿⣶⣶⣦⣄⣀⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⣠ ⣿⣿⣿⣿⣶⣦⣄⡀⠉⠉⠉⠛⠻⢷⣦⣭⣭⣙⣛⣛⠷⠶⠤⠤⠤⠤⠤⠤⠤⢎ ⣿⡟⣩⣶⣶⣦⡙⢿⣷⣦⣄⡀⠄⠄⠈⠉⠉⠉⠛⠛⠛⠛⠛⠿⠿⢿⣿⡿⢿⣿ ⡟⣸⣿⣿⣿⣿⣿⡄⣿⣿⣿⣿⣷⣶⣤⣤⣀⡀⠄⠄⠄⠄⠄⠄⢀⣀⣰⣾⣿⣿ ⡇⣿⣿⣿⣿⣿⣿⣿⢸⣿⠋⣭⡙⢿⠋⣩⡝⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣷⡘⢿⣿⣿⣿⠿⣃⣿⣿⡀⠶⠒⣾⡀⠻⠏⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣶⣮⣭⣶⣾⣿⣿⣿⣿⣿⣿⣿⣍⣉⣁⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'lule") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⠋⣁⣀⣀⡈⠙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇ ⣿⣿⢟⣛⣿⣿⡲⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠛⠛⠛⠛⠛⠻⣿⣿⣿⡇ ⣿⡇⠾⠛⠛⠛⠛⠄⢻⣿⣿⣿⣿⡍⠉⠉⠄⠄⠄⢀⣤⢤⣄⣀⠄⠄⠈⠉⠄ ⣿⣥⣤⣄⣀⣠⣶⣀⣠⣿⣿⣿⡿⠁⠄⠄⣀⣐⠊⠛⠛⠻⠖⠄⠉⢀⡀⢀⡀ ⣿⣿⣿⣿⣿⣛⣉⣵⣿⣿⣿⡿⠁⠄⠄⢲⣿⣿⣿⣳⠂⠒⠄⠄⠄⠄⠠⠾⠿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡦⠄⠄⠈⠙⠻⣿⣿⣿⣶⣶⣶⣶⣾⣿⣿⣿ ⣿⣿⣿⣿⣿⡿⢻⣿⣿⣿⡿⠋⠄⠄⠄⠄⠄⠄⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⠏⣰⡿⠛⠛⠃⠄⢠⠄⠄⠄⠄⠄⠄⠄⠄⠘⢿⣿⣿⣿⣿⣿⣿⣿ ⠙⣿⣿⣿⣴⡿⠄⠄⠄⠄⠘⠛⠒⠄⠄⠐⠂⠄⠄⠄⠄⠈⢻⣿⣿⣿⣿⢿⣿ ⠠⣿⣿⣿⣿⣷⡀⢠⣶⣾⣿⣿⣿⠿⡿⢿⡧⣶⢤⠄⠄⠄⠄⣻⣿⣿⣿⣿⣿ ⣶⣿⣿⣿⡟⢨⠙⠄⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⣰⣿⡀⣿⣿⣿⣿⣿⣿ ⢿⣿⢟⠹⡁⣼⡀⣄⢀⣀⠐⠠⢄⣀⣀⣴⣶⣷⣶⣿⣿⣿⣿⡿⠻⣿⣿⣿⣿ ⠈⠂⠄⠄⠠⢿⣿⡘⣺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠄⠄⠻⠾⡛ ⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠄⠄⠄⠄⠄⠂`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

if (message.toLowerCase().startsWith("'ping") && command === 'ping') {  
    if (!block) {
    const getUptime = new Date().getTime() - Date.parse(runTime)
    const botUptime = humanizeDuration(getUptime, { round: true })
    client.color(array[Math.floor(Math.random() * array.length)])
        client.ping(channel).then(function (data) {
            console.log(data);
            client.action(channel, `FeelsDankMan 🏓 Pong! Latency is ${Math.floor(Math.round(data * 1000))}ms | Bot Uptime: ${botUptime} | RAM: ${Math.round(process.memoryUsage().rss / 1024 / 1024)}mb | Channels: ${client.getChannels().length} `)
            block = true;
            setTimeout(() => {
                block = false;
                }, (5 * 1000));
            })
        }
    }   

    if (message == "'pingpong") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `ppPing ppPong 🏓 PingPong `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    

    if (message == "'copetix") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⠈⠀⠐⠠⠐⡀⡂⡢⡂⢆⠪⡘⠤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢀⢂⢅⢎⢢⢊⢔⢕⡎⣗⡵⣕⣵⡱⡠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢰⢱⢕⣗⢷⣽⣾⣯⣿⣿⣿⣿⡿⣿⡄⠋⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢜⢜⢵⢝⣽⢯⣿⣿⣟⣿⣾⣿⣿⣿⣿⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠌⢆⢇⢟⣞⣿⣻⣽⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⡘⠔⢅⢣⢳⣯⣿⣿⣿⣿⣿⣿⣿⡿⡾⡿⠵⢀⠨⡀⠀⠀⠀⠀⠀⠀⠀���⠀ ⣈⠪⠨⡂⠫⡪⡓⣝⢽⢙⠿⣽⡺⣺⣽⣞⡾⡢⡢⠅⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠹⣎⢌⡢⡑⣝⣟⣿⣽⡎⢜⣿⣝⣿⣽⣯⢯⠂⠈⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠂⠝⣷⡹⢮⣻⣽⡿⡾⣹⢮⣻⣿⣾⣽⣽⢧⠃⠀⠀⠀⠀⡀⠀⠀⡀⠀⠀⠀ ⠀⠡⢊⢫⢷⡽⣾⢾⣟⠝⡾⠽⣿⢿⣻⡽⡕⣠⣶⢿⣻⡷⡾⠺⠠⠀⠀⠀⠀ ⠐⡈⠀⠕⡍⢯⢟⡿⡽⣻⢽⣻⡽⡿⣽⢧⣓⡟⡥⡧⡶⡴⣲⢽⡲⣲⣲⢤⡂ ⢸⢶⡈⡐⠨⢊⢗⡵⣟⣞⣷⣟⣿⢿⡯⢃⡽⡇⢯⣻⢮⣣⡵⡶⡮⣵⣲⣺⡂ ⠀⠍⢷⣔⠈⡀⠂⡝⣵⣳⣳⣏⣟⣿⡃⣾⡏⠀⣟⢾⢽⣺⢽⢽⢽⣺⣺⣺⡂ ⠀⠡⡡⢙⠷⢶⣦⣤⣁⢓⠵⡻⣺⡵⣟⠏⠂⡀⠹⠽⠵⠼⠭⠭⠽⠾⠵⠗⠇ `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'trihard") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `⣿⣿⣿⣿⣿⣿⡿⢫⣍⣭⣥⣶⣶⡶⠶⣭⣴⣬⣩⣍⣛⢻⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⠟⣥⣿⣭⡿⠿⠿⠟⠿⠁⠉⢻⣿⣿⣿⣿⣷⣬⠹⣿⣿⣿⣿⣿ ⣿⣿⣿⡿⢃⣾⡿⠟⠉⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⠛⠻⢿⣷⠸⣿⣿⣿⣿ ⣿⣿⣿⡲⣿⣯⠁⠄⠄⠄⣀⣀⠄⠄⢀⣀⣀⠄⠄⠄⠄⠄⠄⠈⠃⠹⣿⣿⣿ ⣿⣿⣿⠃⠼⠄⠄⠄⠄⠾⢿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠤⠄⠄⠄⠄⠄⣿⣿⣿ ⣿⣿⣿⠄⠄⠄⠄⠄⠄⠄⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⣿⣿⣿ ⣿⣿⣿⣿⣇⣤⣄⠄⠄⣠⣬⣽⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠄⠄⢠⣾⣿⣿⣿ ⣿⣿⣿⣿⣇⢿⣿⠄⢀⣿⣿⣴⣅⣼⣿⣿⣿⡿⣟⠉⡒⠄⢀⣠⣾⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣶⠄⠄⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣴⠄⣾⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⡄⠄⠈⠛⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢠⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣷⡀⠄⠛⣰⣾⣾⣿⣿⣿⣤⠉⣉⠉⣠⣾⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣷⡀⠄⢻⣿⣿⣿⣿⣿⣿⠟⢁⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠸⣿⣿⣟⣛⣛⠁⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡉⠛⠛⠛⣫⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    
    
    
    if (message == "'poki") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.action(channel, `Simping for Pokimane isn't just a moment, it’s a lifestyle 💫 a reason to breathe 🤲 an escape from this evil world filled with thieves 🌏 It’s art 🖼 the first gift you open on Xmas 🎁 a hug from a loved one 🤗 everything you’ve ever wanted love 💗 everything you need 💕🥺`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message == "'lsco") {
        client.action(channel, `pepeLaugh 👉 https://i.nuuls.com/heLxR.png `)
    }


    if (message == "'crucialenjoyer") {
        client.action(channel, `EZ 👉 https://i.nuuls.com/3MH4j.png `)
    }

    if (message == "'pokilookingatyou") {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `⣿⣿⣿⣿⣿⣿⣿⣿⢟⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣻⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⣻⣿⣿⠿⢛⣩⡭⠭⠭⠭⠭⢿⣟⡿⢿⣶⣿⣿⣿⣿⣿⣿⣿ ⣿⣿⣿⣿⣿⣿⡏⠉⠁⠐⠛⠁⠄⠄⠄⠄⠄⠄⠈⠉⠙⠻⢷⣶⣯⡻⣿⣿⣿ ⣿⣿⣿⣿⠋⠉⠄⠄⢀⣶⣿⣿⣿⣿⣿⣿⣷⣄⠄⠄⠄⠄⠄⠄⠛⢿⣮⡻⣿ ⣿⣿⣾⠏⠄⠄⠄⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡧⠄⠄⠄⠄⠄⠄⠄⠙⠿⢟ ⣿⣿⠏⠄⠄⠄⣠⣿⣿⡿⢿⣿⣿⣿⣿⣿⡿⠛⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄ ⣟⠋⠄⠄⠄⠄⣿⣵⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⠄⠄⠄⠄⣈ ⡁⠄⠄⠄⠄⢸⣿⣿⠿⠟⠻⣿⣿⣿⣿⣿⣿⡉⠉⠄⠄⠄⠄⠄⠄⠄⠄⠄⢙ ⠄⠄⠄⠄⠄⣿⣿⣦⣤⣴⣾⣿⣿⣿⣿⣿⣿⣿⣷⣶⣤⡀⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⠟⢿⡿⠄⠻⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣶⣿⣷⣶⣶⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠻⠿⣿⣿⣿⡇⠄⠄⠄⠄⠄⠄⠄ ⠄⠄⠄⠄⠄⢹⣿⣿⣿⣿⣋⣥⣶⣶⣤⣤⣶⣄⡀⢹⣿⠃⠄⠄⠄⠄⠄⠄⠄ ⠄⢀⠄⠄⠄⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣅⠈⠙⠿⠛⠄⠄⠄⠄⠈⠑⢦⣄ `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }



    if (message.toLowerCase().startsWith("'pick") && command === 'pick') {
        if (!block) {
            let array = ["Yes Okayge", "No Okayge", "Maybe Okayge"]
            client.action(channel, ` @${user.username} ${array[Math.floor(Math.random() * array.length)]}`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'8ball") && command === '8ball') {
        if (!block) {
            let array = ["Yes Okayge", "No Okayge", "Maybe Okayge", "Surely Clueless", "Fuck You Bruh", "NOIDONTTHINKSO", "Copege I believe so", "YESIDOTHINKSO", "Clueless TeaTime", "Basedding no", "NOIDONTTHINKSO Never Doubt"]
            client.action(channel, ` @${user.username} ${array[Math.floor(Math.random() * array.length)]}`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'roll") {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} :tf: 👉   ${Math.floor(Math.random() * 2) + 1}!`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'gaytest") && command === 'gaytest') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} ${args.join(" ")} is  ${Math.floor(Math.random() * 100) + 1}% gay Okayge`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'lesbiantest") && command === 'lesbiantest') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} ${args.join(" ")} is  ${Math.floor(Math.random() * 100) + 1}% lesbian Okayge`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'cock") && command === 'cock') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} ${args.join(" ")} has ${Math.floor(Math.random() * 30) + 1}cm cock Okayge`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'vagina") && command === 'vagina') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} ${args.join(" ")} 's vagina is ${Math.floor(Math.random() * 17) + 1}cm deep Okayge`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'iq") && command === 'iq') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} ${args.join(" ")} has ${Math.floor(Math.random() * 269) + 1}iq FeelsDankMan`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'wedding") && command === 'wedding') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} and ${args.join(" ")} will have wedding in ${Math.floor(Math.random() * 20) + 1} Years ${Math.floor(Math.random() * 11) + 1} Months ${Math.floor(Math.random() * 30) + 1} Days ${Math.floor(Math.random() * 59) + 1} Minutes 💒 ❤ 💍  Pag`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'swag") && command === 'swag') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} ${args.join(" ")} has ${Math.floor(Math.random() * 100) + 1} % swag 😎 `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'love") && command === 'love') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `Love between ${user.username} and ${args.join(" ")} is ${Math.floor(Math.random() * 100) + 1}% PogChamp ❤  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'depression") && command === 'depression') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} ${args.join(" ")} is ${Math.floor(Math.random() * 100) + 1}% Depressed PoroSad 💔  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.startsWith("ppBounce") && user['user-id'] === "654447790") {
        client.color(array[Math.floor(Math.random() * array.length)])
        client.action(channel, "ppJump")
    }

    if (message.startsWith("ppCircle") && user['user-id'] === "625016038") {
        client.color(array[Math.floor(Math.random() * array.length)])
        client.action(channel, "ppCircle")
    }

    if (message === "'mods" && user['user-id'] === "162760707") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.mods(channel).then(function (data) {
                console.log(data);
                client.action(channel, "MODS are: " + data)
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            })
        }
    }
    

    if (message === "'vips" && user['user-id'] === "162760707") {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.vips(channel).then(function (data) {
                console.log(data);
                client.action(channel, `VIPS are: ` + data)
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            })
        }
    }

    if (message.toLowerCase().startsWith("'7tvsearch") && command === '7tvsearch') {
        if (!block) {
            if (args.join(" ") == []) {
                client.action(channel, 'No emote provided')
                ; return;
            }
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} https://7tv.app/emotes?sortBy=popularity&page=0&query=${args.join(" ")} `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }

    }

    if (message.toLowerCase().startsWith("'bttvsearch") && command === 'bttvsearch') {
        if (!block) {
            if (args.join(" ") == []) {
                client.action(channel, 'No emote provided')
                ; return;
            }
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} https://betterttv.com/emotes/shared/search?query=${args.join(" ")} `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'ffzsearch") && command === 'ffzsearch') {
        if (!block) {
            if (args.join(" ") == []) {
                client.action(channel, 'No emote provided')
                ; return;
            }
            client.color(array[Math.floor(Math.random() * array.length)])
            client.action(channel, `@${user.username} https://www.frankerfacez.com/emoticons/?q=${args.join(" ")} `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'emotes") && command === 'emotes') {
        if (!block) {
            let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                client.color(array[Math.floor(Math.random() * array.length)])
                client.action(channel, `@${user.username} https://e.wrnv.xyz/list/${channelTarget} RaccAttack : https://emotes.raccatta.cc/twitch/${channelTarget}`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message.toLowerCase().startsWith("'color") && command === 'color') {
        if (!block) {
            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                }

                const userData = userCheck.body
                const userColor = userData.chatColor
                
                if(userColor === null) return { reply: 'Default. (never set)' }

                const colorName = await got(`https://www.thecolorapi.com/id?hex=${userColor.replace('#', '')}`).json();

                client.color(array[Math.floor(Math.random() * array.length)])

                client.action(channel, `${userColor} (${colorName.name.value}) `) 
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message.toLowerCase().startsWith("'logs") && command === 'logs') {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
            client.color("Red")
            client.action(channel, `@${user.username} https://logs.apulxd.ga/?channel=${channelTarget}&username=${userTarget} or https://logs.ivr.fi/?channel=${channelTarget}&username=${userTarget}`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }
    
if(isModUp) { 
    if (message.toLowerCase().startsWith("'massping") && command === 'massping') {
        client.color(array[Math.floor(Math.random() * array.length)])     
        const tChannel = channel.replace("#", "")
            let request = await got(`https://tmi.twitch.tv/group/user/${tChannel}/chatters`, { responseType: 'json' })
            if (!block) {
            let all = request.body.chatters
            let arr = [...all.viewers, ...all.vips, ...all.moderators]
            let msping = arr.values()
            for (let letter of msping) {
                client.action(channel, `${letter} ${args.join(" ") ?? 'TriHard'}`) 
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }
    }
}
    

    if (message.toLowerCase().startsWith("'retard") && command === 'retard') {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
            client.color("Red")
            client.action(channel, `@${user.username} https://i.nuuls.com/Jiwv3.png , https://i.nuuls.com/PDVFk.png , https://i.nuuls.com/gRnsh.png , https://i.nuuls.com/N7F5g.png , https://i.nuuls.com/L9l4Y.png , https://i.nuuls.com/8MqtH.png , https://i.nuuls.com/q81Qw.png , `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message.toLowerCase().startsWith("'isbanned")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            if (args[1]) {
                channelTarget = args[1];
            }

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                }

                const userData = userCheck.body

            const userBanned = userData.banned
            const isbanned = userBanned

                client.action(channel, `${userTarget} Banned: ${isbanned} MODS`)
    
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'ispartner")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            if (args[1]) {
                channelTarget = args[1];
            }

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                }

                const userData = userCheck.body

            const userpartner = userData.partner
            const isPartner = userpartner

                client.action(channel, `${userTarget} Partner: ${isPartner} ;p `)
    
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'isaffiliate")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            if (args[1]) {
                channelTarget = args[1];
            }

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                }

                const userData = userCheck.body

            const useraffiliate = userData.affiliate
            const isAffiliate = useraffiliate

                client.action(channel, `${userTarget} Affiliate: ${isAffiliate} ;p `)
    
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'whois")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            if (args[1]) {
                channelTarget = args[1];
            }

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                
                
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                
            
    }
                const userData = userCheck.body
                const userColor = userData.chatColor
                
                

                if(userColor === null) return { reply: 'Default. (never set)' }

                const colorName = await got(`https://www.thecolorapi.com/id?hex=${userColor.replace('#', '')}`).json();
            
            
            const userId = userData.id
            const userAvatar = userData.logo
            const userBio = userData.bio
            const userBanned = userData.banned
            const userPartner = userData.partner
            const userAffiliate = userData.affiliate
            const userBadge = userData.badge

            const uid = userId
            const avatar = userAvatar
            const bio = userBio
            const isbanned = userBanned
            const isPartner = userPartner
            const isAffiliate = userAffiliate
            const badge = userBadge

            const creation = await got(`https://decapi.me/twitch/creation/${userTarget}`);
                let creationDate = creation.body

                client.action(channel, `@${user.username} ${userTarget}, Banned: ${isbanned}, Partner: ${isPartner}, Affiliate: ${isAffiliate}, Badge: ${badge}, Avatar: ${avatar} , Color: ${userColor} (${colorName.name.value}), Account created at ${creationDate}, id: ${uid}, bio: ${bio}`)
    
                
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'firstmessage1") || message.toLowerCase().startsWith("'fm1")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            
            

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
            const firstMessage = await got(`https://api.ivr.fi/logs/firstmessage/${channelTarget}/${userTarget}`,{
                responseType: 'json',
                throwHttpErrors: false
            })
            const userData = firstMessage.body

            const userFirstMessage = userData.message
            const userFirstMessageTime = userData.time
            if (!userFirstMessage) {
                client.action(channel, "Channel isn't tracked.")
                ;return;
            }    

                client.action(channel, `${channelTarget}, ${userFirstMessage} (${userFirstMessageTime}) `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'lastmessage1") || message.toLowerCase().startsWith("'lm1")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            
            

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
            const lastMessage = await got(`https://api.ivr.fi/logs/lastmessage/${channelTarget}/${userTarget}`,{
                responseType: 'json',
                throwHttpErrors: false
            })
            const userData = lastMessage.body

            const userlastMessage = userData.message
            const userlastMessageTime = userData.time
            if (!userlastMessage) {
                client.action(channel, "Channel isn't tracked.")
                ;return;
            }    

                client.action(channel, `${channelTarget}, ${userlastMessage} (${userlastMessageTime}) `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'firstmessage2") || message.toLowerCase().startsWith("'fm2")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");


            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
            const firstMessage = await got(`https://api.paauulli.me/logs/firstmessage/${channelTarget}/${userTarget}`,{
                responseType: 'json',
                throwHttpErrors: false
            })
            const userData = firstMessage.body

            const userFirstMessage = userData.text
            const userFirstMessageTime = userData.timestamp
                if (!userFirstMessage) {
                    client.action(channel, "Channel isn't tracked.")
                    ;return;
                }
                client.action(channel, `${channelTarget}, ${userFirstMessage} (${userFirstMessageTime}) `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'lastmessage2") || message.toLowerCase().startsWith("'lm2")) {
        client.color(array[Math.floor(Math.random() * array.length)])
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");


            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
            const lastMessage = await got(`https://api.paauulli.me/logs/lastmessage/${channelTarget}/${userTarget}`,{
                responseType: 'json',
                throwHttpErrors: false
            })
            const userData = lastMessage.body

            const userlastMessage = userData.text
            const userlastMessageTime = userData.timestamp
                if (!userlastMessage) {
                    client.action(channel, "Channel isn't tracked.")
                    ;return;
                }
                client.action(channel, `${channelTarget}, ${userlastMessage} (${userlastMessageTime}) `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

        if (message.toLowerCase().startsWith("'followage")  || message.toLowerCase().startsWith("'fa")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const followage = await got(`https://decapi.me/twitch/followage/${channelTarget}/${userTarget}?precision=3`); // will return the days too
                let data = followage.body
                client.action(channel, `${userTarget} is following ${channelTarget} for: ${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        


        if (message.toLowerCase().startsWith("'accage")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const accage = await got(`https://decapi.me/twitch/accountage/${userTarget}?precision=4`)
                let data = accage.body
        
                client.action(channel, `${userTarget}'s account is ${data} old`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (message.toLowerCase().startsWith("'avatar")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const avatar = await got(`https://decapi.me/twitch/avatar/${userTarget}`)
                let data = avatar.body
        
                client.action(channel, `${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }


        if (message.toLowerCase().startsWith("'subs")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const subs = await got(`https://decapi.me/twitch/subcount/${channelTarget}?`); 
                let data = subs.body
                client.action(channel, `Channel ${channelTarget} has  ${data} subscribers`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (message.toLowerCase().startsWith("'subemotes")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const subemotes = await got(`https://decapi.me/twitch/subscriber_emotes/${channelTarget}?precision=4`); 
                let data = subemotes.body
                    if (data === 'This channel does not have any subscriber emotes. ') {
                        client.action(channel, `This channel does not have any subscriber emotes.`)
                ;return;
                }
                client.action(channel, `${data}`)  
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }


        if (message.toLowerCase().startsWith("'uptime")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                
                const uptime = await got(`https://decapi.me/twitch/uptime/${channelTarget}`); 
                let data = uptime.body
                client.action(channel, data)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }



        if (message.toLowerCase().startsWith("'viewers") && command === 'viewers') {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                const viewers = await got(`https://decapi.me/twitch/viewercount/${channelTarget}?`); 
                let data = viewers.body
                client.action(channel, data)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }
        
        if (message.toLowerCase().startsWith("'followers") && command === 'followers') {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                const followers = await got(`https://decapi.me/twitch/followcount/${channelTarget}`); 
                let data = followers.body
                client.action(channel, `${channelTarget} has ${data} followers`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }
        

        if (message.toLowerCase().startsWith("'modlookup")  || message.toLowerCase().startsWith("'ml")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                client.action(channel, `${userTarget} is MOD/VIP in these channels: https://www.twitchdatabase.com/roles/${userTarget}`)
        }
    }

        if (message.toLowerCase().startsWith("'title")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const title = await got(`https://decapi.me/twitch/title/${channelTarget}?`); 
                let data = title.body
                
                client.action(channel, `Title is: ${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (message.toLowerCase().startsWith("'uid")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const uid = await got(`https://decapi.me/twitch/id/${userTarget}?`); 
                let data = uid.body
                client.action(channel, `${user.username} ${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (message.toLowerCase().startsWith("'game")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const game = await got(`https://decapi.me/twitch/game/${channelTarget}?`); 
                let data = game.body
                client.action(channel, `${channelTarget} is currently playing  ${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        

        if (message.toLowerCase().startsWith("'subage")  || message.toLowerCase().startsWith("'sa")) {
            client.color(array[Math.floor(Math.random() * array.length)])
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const subage = await got(`https://decapi.me/twitch/subage/${channelTarget}/${userTarget}?precision=4`);
                let data = subage.body
                    if (data === '[Error from Twitch API] 404 Not Found') {
                        client.action(channel, `@${user.username} ${userTarget}  is not a subscriber`)
                ;return;
                }
                client.action(channel, `${userTarget} is subscribed to ${channelTarget} for ${data}`)  
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }


let foodcheck = client.food.get(user['user-id']); 
if (foodcheck) { 
    client.food.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} finished eating 🍔: ${foodcheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(foodcheck.time), { round: true })})`)
}
 
if (message.toLowerCase().startsWith("'food")) {
    client.color(array[Math.floor(Math.random() * array.length)])
    if (!block) {

        let foodMessage = args.join(' ') ? args.join(' ') : 'no message';
        let foodlist = client.food.get(user['user-id']);
        if (!foodlist) {
            let construct = {
                id: user['user-id'],
                reason: foodMessage,
                time: new Date().toString()
            };
            client.food.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is now eating 🍔: ${foodMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

let wccheck = client.wc.get(user['user-id']); 
if (wccheck) { 
    client.wc.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} came back from toilet 🚽: ${wccheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(wccheck.time), { round: true })})`)
}
 
if (message.toLowerCase().startsWith("'wc")) {
    client.color(array[Math.floor(Math.random() * array.length)])
    if (!block) {

        let wcMessage = args.join(' ') ? args.join(' ') : 'no message';
        let wclist = client.wc.get(user['user-id']);
        if (!wclist) {
            let construct = {
                id: user['user-id'],
                reason: wcMessage,
                time: new Date().toString()
            };
            client.wc.set(user['user-id'], construct);

            client.action(channel, `@${user.username} went to a toilet 🚽: ${wcMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

let brbcheck = client.brb.get(user['user-id']); 
if (brbcheck) { 
    client.brb.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} is back: ${brbcheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(brbcheck.time), { round: true })})`)
}

if (message.toLowerCase().startsWith("'brb")) {
    client.color(array[Math.floor(Math.random() * array.length)])
    if (!block) {

        let brbMessage = args.join(' ') ? args.join(' ') : 'ppHop';
        let brblist = client.brb.get(user['user-id']);
        if (!brblist) {
            let construct = {
                id: user['user-id'],
                reason: brbMessage,
                time: new Date().toString()
            };
            client.brb.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is going to be right back: ${brbMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

let gncheck = client.gn.get(user['user-id']); 
if (gncheck) { 
    client.gn.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} just woke up: ${gncheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(gncheck.time), { round: true })})`)
}

if (message.toLowerCase().startsWith("'gn")) {
    client.color(array[Math.floor(Math.random() * array.length)])
    if (!block) {

        let gnMessage = args.join(' ') ? args.join(' ') : '🛏 💤 ';
        let gnlist = client.gn.get(user['user-id']);
        if (!gnlist) {
            let construct = {
                id: user['user-id'],
                reason: gnMessage,
                time: new Date().toString()
            };
            client.gn.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is now sleeping : ${gnMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

let showercheck = client.shower.get(user['user-id']); 
if (showercheck) { 
    client.shower.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} finished showering 🚿 : ${showercheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(showercheck.time), { round: true })})`)
}

if (message.toLowerCase().startsWith("'shower")) {
    client.color(array[Math.floor(Math.random() * array.length)])
    if (!block) {

        let showerMessage = args.join(' ') ? args.join(' ') : 'no message';
        let showerlist = client.shower.get(user['user-id']);
        if (!showerlist) {
            let construct = {
                id: user['user-id'],
                reason: showerMessage,
                time: new Date().toString()
            };
            client.shower.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is now showering 🚿 : ${showerMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

if(message == "'bruh"){
    if (!block) {
    client.color(array[Math.floor(Math.random() * array.length)])
    client.action(channel, 'Bruh')
    block = true;
    setTimeout(() => {
        block = false;
    }, (5 * 1000));
}
}

let afkcheck = client.afk.get(user['user-id']); 
if (afkcheck) { 
    client.afk.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} is no longer afk: ${afkcheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(afkcheck.time), { round: true })})`)
}



if (message.toLowerCase().startsWith("'afk")) {
    client.color(array[Math.floor(Math.random() * array.length)])
    if (!block) {

        let afkMessage = args.join(' ') ? args.join(' ') : 'no message';
        let afklist = client.afk.get(user['user-id']);
        if (!afklist) {
            let construct = {
                id: user['user-id'],
                reason: afkMessage,
                time: new Date().toString()
            };
            client.afk.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is afk: ${afkMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}







if (message.toLowerCase().startsWith("'tuck")) {
    client.color(array[Math.floor(Math.random() * array.length)])
    
    const emote = args[1] ? args[1] : 'FeelsOkayMan'

    let userTarget = user.username;
    if (args[0]) {
        if (args[0].startsWith("@")) {
            args[0] = args[0].substring(1);
        }
        userTarget = args[0];
    }
        if (userTarget == user.username){
            client.say(channel, `@${user.username} tucked himself to bed Sadge 👉 🛏 `)
        ;return;
        }
        client.action(channel, `@${user.username} tucked ${userTarget} to bed ${emote} 👉 🛏 `)
}

if(message == "'rcolor") {
    client.color(array[Math.floor(Math.random() * array.length)])
    if (!block) {
    var color = "";
    for(var i = 0; i < 3; i++) {
        var sub = Math.floor(Math.random() * 256).toString(16);
        color += (sub.length == 1 ? "0" + sub : sub);
    }
    client.action(channel, "#" + color);
    block = true;
    setTimeout(() => {
        block = false;
    }, (5 * 1000));
}
};

if(message.startsWith(`'math`)){
    client.color(array[Math.floor(Math.random() * array.length)])
    if(message.split(" ")[1] !== undefined){
        let excersise = message.substring(message.split(" ")[0].split("").length +1, message.split("").length)
      excersise = excersise.replace(/\s/g, "")
      let validnums = 0
      let invalidnums = 0
      for(w = 0; w < excersise.length; w++){
        let numchar = excersise.split("")[i]
        if(!isNaN(numchar)){
          validnums = +validnums+1
        } else {
          invalidnums = +invalidnums+1
        }
      }
        let excersisesolved = eval(excersise)
        if(excersisesolved !== isNaN){
            client.action(channel, `${user.username} ${excersisesolved} FeelsOkayMan`)
        }
        else {
            client.action(channel, `${user.username} Not mathematical! FeelsDankMan`)
            
        } 
    }  
}

    if(message.toLowerCase().startsWith("'restart") && user['user-id'] === "162760707") {
        client.color(array[Math.floor(Math.random() * array.length)])
        client.action(channel, 'Restarting... ppJump')
        .then
        process.exit(1)
    }

if (channel === '#pajlada') {
    if (!block) {
    if(message == "monkaStop ALARM" && user['user-id'] === "670591988") {
        client.color(array[Math.floor(Math.random() * array.length)])
        client.action(channel, 'pajaGIGA 🚨 ALERT')
        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}
}

    if (message === "'broadcaster") {
        if (!block) {
            client.color(array[Math.floor(Math.random() * array.length)])
            let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }    
            
                client.action(channel, `${channelTarget}`)
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (isModUp) {
            if (message.toLocaleLowerCase().startsWith("'settitle")) {
        let patch = await got.patch('https://api.twitch.tv/helix/channels?broadcaster_id=162760707 ', {
            headers: { "Authorization": `Bearer cnqgpj0xa9gtnmawlb83cjeuddphma`, "Client-ID": `xszg16qk7z67cirz37vu1cpdz6qtn0`, "Content-type": 'application/json' },
            body: JSON.stringify({ "title": `${args.join(" ")}` })
        });
        
        client.action(channel, `title changed to "${args.join(" ")}"`)
    }
}

if (isModUp) {
    if (message.toLocaleLowerCase().startsWith("'setgame")) {
const game = args.join(" ")

const getID = await got(`https://api.twitch.tv/helix/games?name=${game}`, {
  headers: { "Authorization": `Bearer ${process.env.app_oauth}`, "Client-ID": `${process.env.client_id}` },
  responseType: "json"
});
const gameID = getID.body

if (gameID.data.length == 0) {
    client.action(channel, `I couldn't find this game...`) 
;return;
}

let patch = await got.patch(`https://api.twitch.tv/helix/channels?broadcaster_id=162760707`, { headers: { "Authorization": `Bearer ${process.env.app_oauth}`, "Client-ID": `${process.env.client_id}`, "Content-type": 'application/json' }, body: JSON.stringify({ "game_id": `${gameID.data[0].id}` }) })

client.action(channel, `game changed to "${gameID.data[0].name}"`)
}
}



if (message.toLowerCase().startsWith("'song")) {

const SpotifyWebApi = require('spotify-web-api-node');
const spotify = require('spotify-token');
 
const Updater = require("spotify-oauth-refresher");
const api = new Updater({ clientId: `${process.env.clientId}`, clientSecret: `${process.env.clientSecret}` });

api.setAccessToken(`${process.env.accessToken}`);
api.setRefreshToken(`${process.env.refreshToken}`);


const me = await api.request({
  url: "https://api.spotify.com/v1/me/player/currently-playing",
  method: "get",
  authType: "bearer",
});

console.log(me.config.headers.Authorization);
    

    let spotify_song = {
        method: "GET",
          headers: {
          "Accept" : "application/json",
          "Content-Type" : "application/json",
          "Authorization" : `${me.config.headers.Authorization} `
          }
        }
    
        const request = require('request')
      request(`https://api.spotify.com/v1/me/player/currently-playing`, spotify_song, function(e, r){
        if(e){
          client.say(channel, `${user.username} Error on getting not playing`)
          console.log(`>> ERROR ${e}`)
        } else {
          if(r.body.length < 60){
            client.say(channel, `${user.username} Nothing playing`)
          } else {
            let dat = JSON.parse(r.body)
            
            const format = require('format-duration')

            const progress_ms = format(dat.progress_ms)
            const duration_ms = format(dat.item.duration_ms)
            
            client.action(channel, `VeryRacc is currently playing ${dat.item.name} by ${dat.item.album.artists[0].name} ▶ [${progress_ms}/${duration_ms}]`)
          }
        } 
    })      
}


if (message.toLowerCase().startsWith("'test")) {

    const request = require('request');

const options = {
  method: 'GET',
  url: `https://emotes.adamcy.pl/v1/channel/${channelTarget}/emotes/7tv.bttv.ffz`,
  headers: {'Content-Type': 'application/json'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
}
        
         



});

