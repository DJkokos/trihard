require('dotenv').config();

const tmi = require('tmi.js');

const client = new tmi.Client({    

    options: { 
        joinInterval: 300,
        debug: true, 
        messagesLogLevel: "info"
    },
    connection: {
        reconnect: true,
        secure: true
    },
    identity: {
        username: process.env.username,
        password: process.env.password
    },
    channels: ["opat04", "meiiodaas", "xpatrck", "sneeeze_", "fookstee", "carltincan", "turtoise", "anniiikaa", "bobthebuilder_98", "pajlada", "masenka12", "scarder_", "lukyjuk", "godfelyp1", "lordevid", "kawanpls", "speedster05", "feelsdonkman"]
});
const got = require('got');

const runTime = new Date().toString()

const humanizeDuration = require("humanize-duration");

const bot = 'juicerb0t'

const rafkList = new Set() //outside  client.on

const rgnList = new Set()

client.afk = new Map()
const afk = client.afk

client.brb = new Map()
const brb = client.brb

client.gn = new Map()
const gn = client.gn

client.food = new Map()
const food = client.food

client.shower = new Map()
const shower = client.shower

client.wc = new Map()
const wc = client.wc




client.connect(process.env.password).catch(console.error);

var block = false;


    client.on("message", async (channel, user, message, self) => {

    const args = message.slice(1).split(' ')
    const command = args.shift().toLowerCase();
    const size = args[1]
    const size2 = args[0]

    let isMod = user.mod || user['user-type'] === 'mod';
    let isBroadcaster = channel.slice(1) === user.username;
    let isModUp = isMod || isBroadcaster;
    let isBroadcasterUp = isBroadcaster;

if(message.toLowerCase().startsWith("'commands") && command === 'commands') {
        if (!block) {
            client.say(channel, `https://github.com/felyp7/juiceb0t`);
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    
    if(message.toLowerCase().startsWith("'god") && command === 'god' && channel === '#meiiodaas') {      
        if (!block) {
        client.action(channel, 'https://www.youtube.com/shorts/tFnWj2S1xQU GodIsGoodGodIsGreat')
        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}




    if (message.startsWith("(cookie reminder) juicerb0t, eat cookie please :) üç™") && user['user-id'] === "229225576") {
        client.say(channel, '!cookie')
    }


if (message.toLowerCase().startsWith("'restart") && user.username === 'meiiodaas' ) {
    process.exit()
}

    if (message.toLowerCase().startsWith("'vanish")) {
        if (isModUp) {
            client.action(channel, "Can't timeout broadcaster/moderator.")
            ;return;
        }
        client.say(channel, `/timeout @${user.username} 1`)

    }

    if (user['user-id'] == '713320280' || user['user-id'] == '162760707') {
        if (message.toLowerCase().startsWith("'echo")) {
            client.say(channel, `${args.join(" ")}`)
        }
    }
    
    if (user['user-id'] == '713320280' || user['user-id'] == '162760707') {
        if (message.toLowerCase().startsWith("'say")) {
            
            const [channelTarget, ...restArgs] = args;
            const text = restArgs.join(' ');

            client.say(`${channelTarget}`, `${restArgs.join(" ")}`)
        }
    }

    if (isModUp || user["user-id"] == "162760707") {
        if (message.toLowerCase().startsWith("'pyramid") && command === "pyramid") {
            if (!block) {
                if (!args[1] || isNaN(parseInt(args[0]))) {
                    return client.say(channel, `Usage: 'pyramid 1-100 message`);
                }
                if (parseInt(args[0]) < 1 || parseInt(args[0]) > 100) {
                    return client.say(channel, `Height needs to be between 1 and 100`);
                }
                if (parseInt(args[0]) > parseInt(500 / (args.slice(1).join(" ").length + 1))) {
                    return client.say(channel, `Max possible height for message is ${parseInt(498 / (args.slice(1).join(" ").length + 1))}`);
                }
                let msg = "";
                let phrase = args.slice(1).join(" ");
                block = true;
                setTimeout(() => {
                    block = false;
                }, 5 * 1000);
                for (let i = 1; i < parseInt(args[0]) * 2; i++) {
                    (function (ind) {
                        setTimeout(function () {
                            if (i < parseInt(args[0]) + 1) msg += `${phrase} `;
                            else msg = msg.substring(phrase.length + 1);
                            client.say(channel, `${msg}`);
                        }, 70 * (ind + 1));
                    })(i);
                }
            }
        }
    }


if(isModUp || user['user-id'] == '162760707') { 
    if (message.toLowerCase().startsWith("'spam")) {
        if (!block) {
            if (size2 > 300) {
                client.say(channel, 'the maximum size is 300')
                 ;return;}
            for (var i = 0; i < args[0]; i++) {
                client.say(channel, args.slice(1).join(" "))

                if (i > args[0]) break;
            }
            
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }
}

    if (message == "'artixw") {
        if (!block) {
            client.action(channel, `‚£ã‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚†ø‚†ø‚†õ‚†õ‚†ì‚†Ñ‚†Ñ‚†ê‚†≤‚†¶‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£Ä‚£Ä‚†Ñ‚†Ñ ‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚£Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚£ø‚£ø‚£ø‚£ø‚£ü‚°õ‚£É‚£Ä‚£Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†á‚†Ñ‚††‚†§‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†§ ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£Ä‚£§ ‚£ø‚°ø‚†ã‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚†ª‚†ø ‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢º‚°ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ñ‚†Ñ‚†à‚†â‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚¢ª‚£ø‚£ø‚£ø‚£ø‚£∂‚£¶‚£Ä‚£Ä‚£Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚£Ä‚†Ñ‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚†Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ `);
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'xqcl") {
        if (!block) {
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚£õ‚£õ‚†õ‚†ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚†ã‚¢Å‚£æ‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£≠‚£∂‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚°ø‚†Å‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ú‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚¢Ä‚£§‚£§‚†â‚†Ñ‚£Ä‚£Ä‚£Ä‚†à‚†â‚¢ô‚£ø‚£ø‚£ø‚£ø‚†õ‚†ã‚†â‚†â‚†â‚†Ñ‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚¢∏‚°ø‚†õ‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢π‚£ø‚£ø‚†ã‚†Ñ‚°Ñ‚†à‚†â‚†ô‚†ª‚°Ü‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£∂‚£¶‚£§‚°§‚†Ñ‚£Ä‚£†‚£º‚£ø‚£ø‚£¶‚£Ä‚£§‚£§‚£§‚£¥‚†ñ‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢â‚°ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚†ô‚£ø‚°ø‚†õ‚†ø‚†ø‚†ø‚†ø‚†ø‚£ß‚†â‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°å‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚†Ñ‚†ò‚†ø‚†∑‚†§‚¢Ñ‚£Ä‚°Ä‚†Ñ‚¢Ä‚£Ä‚£Ä‚£â‚£Å‚£à‚£â‚£â‚£â‚£â‚°õ‚¢Å‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£Ä‚£§‚£§‚£§‚£§‚£§‚£Ä‚†â‚†ª‚¢ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ã‚£•‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†â‚¢Å‚£§‚£¥‚£∂‚£∂‚£¶‚£Ñ‚°Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚°ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚¢Ä‚£§‚£∂‚£§‚°à‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†â‚£â‚†ô‚†ª‚£ø‚£ø‚£ø‚†Å‚†Ñ‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚°ø‚†õ‚¢Å‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚¢ª‚£ø‚£ø‚°Ü‚†à‚¢ª‚†á‚†Ñ‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message == "'xqctf") {
        if (!block) {
            client.action(channel, `‚£ø‚°ø‚°ø‚†ê‚¢≠‚£≠‚£¥‚£ø‚£ø‚£ø‚°ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£§‚°â‚†â‚†°‚†§‚¢ø‚£ø‚£ø ‚†õ‚†è‚†Ñ‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†à‚†â‚†ô ‚†Ñ‚£§‚£¥‚£ø‚°ø‚†õ‚†ã‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†â‚†õ‚¢Ø‚£Ω‚°ø‚†ø‚†ø‚†ø‚†õ‚†õ‚†ª‚†ø‚°ø‚†õ‚†Ç‚†Ñ‚†à ‚£§‚†õ‚†â‚¢ª‚°Ä‚£†‚£¥‚£∂‚£∂‚£§‚£§‚£§‚£§‚£¥‚£∂‚£¶‚£§‚£§‚£§‚£§‚£§‚£§‚£†‚£¥‚£ø‚£∂‚£§‚†Ñ‚†Ñ ‚£ø‚°Ä‚†Ñ‚†à‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†â‚†â‚†â‚†â‚†õ‚£ø‚£ø‚£ø‚°ü‚†ã‚†â‚†â‚†â‚†ô‚†õ‚†õ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£†‚£ø‚£ø‚£ø‚£ß‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£Ä‚£Ä‚†Ñ‚†Ñ ‚£ø‚°è‚†Ñ‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ ‚£ø‚£ø‚†Ñ‚¢π‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ñ‚¢∞ ‚†Å‚†Ñ‚†Ñ‚†®‚†â‚†ª‚£ü‚†Ñ‚†Ñ‚†∞‚£ø‚£õ‚£ã‚£Ä‚£à‚†ô‚†õ‚†õ‚†õ‚†õ‚†õ‚¢õ‚£ª‚£ø‚£ø‚†ô‚°á‚†Ñ‚¢∏ ‚£∑‚£Ä‚°Ä‚†Ñ‚†à‚¢∑‚£ø‚£∂‚£§‚£Ñ‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£ß‚°Ñ‚†∏ ‚£ø‚£ø‚£∑‚°Ä‚†Ç‚†Ñ‚†ô‚¢ø‚£ø‚£ø‚£ø‚£∑‚£¨‚£ç‚£Ω‚£ø‚£ø‚£ø‚£ø‚†ø‚¢ø‚£ø‚£ø‚£Ω‚£ø‚£ø‚£ø‚£∑‚†Ñ ‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ü‚£Ä‚£Ä‚†â‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£§‚†ê‚¢Ä‚£Ä‚†à‚†õ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚¢Ä ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£§‚°í‚†í‚¢Ä‚£Ä‚†à‚†â‚†õ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†Å‚¢Ä‚†Ñ  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'xqcs") {
        if (!block) {
            client.action(channel, `‚£ø‚°è‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†â‚†Ñ‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚†ü‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†â‚†â‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚†Ñ‚†Ñ‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£Ä‚£Ä‚£Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚£∑‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†â‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Å‚£†‚£æ ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£¶‚£¥‚£∂‚£§‚£Ñ‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£Ä‚£π‚£ø‚†ü‚†â‚¢†‚£æ‚£ø‚£ø ‚†Ñ‚†Ñ‚†Ñ‚†∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£§‚£Ä‚£Ä‚£§‚£ø‚£ø‚£ø‚£∂‚†Ñ‚£º‚£ø‚£ø‚£ø ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ñ‚£ø‚£ø‚£ø‚£ø ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†õ‚†õ‚†õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢Å‚£º‚£ø‚£ø‚£ø‚£ø ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£§‚°§‚†Ø‚†≠‚†Ω‚£ø‚£≠‚£§‚£Ñ‚†Ñ‚£§‚£æ‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚£π‚£ø ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£ß‚£†‚°¶‚£Ä‚£à‚†ô‚†ª‚£ø‚£á‚†ô‚†õ‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø ‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢Ä‚£Ä‚°Ä‚†ô‚†õ‚†õ‚£°‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚†Ñ‚†Ñ‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£π‚£ø ‚†Ñ‚†Ñ‚†Ñ‚†à‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚£¥‚£ø‚£ø‚£Ø‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

   


    if (message == "'alienpls3") {
        if (!block) {
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Å‚£§‚†ô‚¢ø‚£ø‚¢ü‚°â‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚°è‚†à‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚°ª‚£Ü‚¢§‚†§‚£ø‚°ß‚£Ñ‚£Ä‚°î‚£´‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£å‚†ì‚†ñ‚¢í‚£Å‚£µ‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ö‚£ø‚£∑‚£∂‚£ø‚°ø‚£æ‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ß‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ª‚£ø‚£Ø‚†õ‚†õ‚†ü‚†ª‚£Ø‚£ø‚°ó‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£õ‚¢à‚£∑‚°¶‚°ñ‚£∂‚£∂‚¢õ‚£°‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ò‚£õ‚†≥‚£ª‚¢ã‚£õ‚°õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£õ‚£ª‚£õ‚£ù‚£ø‚£ø‚£É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†õ‚¢õ‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†õ‚¢ø‚£∑‚°Ç‚¢ä‚°â‚†â‚¢ª‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†â‚†à‚£ü‚†Ñ‚†à‚†Å‚†Ñ‚¢à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚¢Ñ‚°Ä‚£†‚£ø‚£Ñ‚°Ä‚¢Ä‚£†‚£ø‚°ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£π‚£Ø‚£≠‚£•‚£ø‚¢ø‚°õ‚£Ω‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£æ‚£ø‚£ø‚£ø‚£Ø‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ß‚†∫‚£ø‚£ø‚†ø‚†ø‚¢ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢π‚£ø‚£Ø‚†â‚†Ç‚£∂‚£ø‚°ü‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚°á‚£Ü‚°ô‚¢ø‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£Ω‚£Ø‚£æ‚£ø‚¢Å‚¢â‚£ª‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ô‚£ø‚£ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚£ø‚£ø‚°ø‚¢õ‚°õ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ñ‚†ì‚¢π‚°ü‚†Ñ‚†ô‚†Å‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ñ‚†Ñ‚†∏‚°á‚†Ñ‚†Ñ‚†Ñ‚£†‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚°£‚¢Ä‚£Ç‚†Ñ‚†Ñ‚†Ñ‚††‚£ê‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¢‚£§‚£Ä‚£†‚£æ‚£æ‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚¢π‚£ø‚£ø‚£ø‚£ø‚°â‚¢ª‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£ø‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£é‚£ß‚†Ñ‚†Ñ‚°Ä‚†ô‚£ø‚†ø‚£ø‚¢∫‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£º‚£ø‚£∑‚£º‚°ß‚†õ‚¢≥‚¢†‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ò‚£ª‚£ø‚¢π‚¢Å‚£Å‚£π‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£õ‚£ø‚£ª‚£æ‚£Ø‚£≠‚£≠‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚£Ñ‚¢π‚£ø‚†ü‚£°‚†Ñ‚†à‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚£∏‚£ø‚†Ñ‚†Å‚†Ñ‚†Ñ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ω‚£∂‚°ö‚†ø‚†ø‚£¶‚£§‚£§‚£æ‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚°ã‚†ì‚†í‚†Å‚†Ñ‚¢Ä‚£∞‚£≠‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚£†‚£¥‚£ø‚£Ø‚£ù‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚†ø‚†ø‚†ø‚†Ñ‚¢π‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚£Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£†‚¢µ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£¶‚£Ä‚¢†‚°Ä‚£†‚£ø‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ª‚£ø‚£ø‚¢∏‚¢∑‚£ø‚£ø‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£õ‚£ª‚¢∏‚°å‚¢Ä‚†π‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ú‚£õ‚£õ‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ã‚¢†‚°å‚¢ø‚£ø‚¢ã‚°§‚†Ñ‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚†Ñ‚†Ñ‚†Ñ‚£º‚£á‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£∑‚¢∂‚°ö‚†ø‚†ü‚£∑‚†∂‚†∂‚†ø‚°ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ö‚¢à‚†ì‚†ä‚†Å‚°Ä‚£Ä‚£¨‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£´‚°ø‚£ø‚£∂‚£Ñ‚£¥‚£ø‚£Ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£±‚£ø‚°á‚†ô‚†ø‚¢ø‚°ø‚¢ü‚£¶‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†∞‚†ø‚¢ø‚£ø‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£Ø‚£≠‚£Ω‚¢π‚£Ñ‚¢Ä‚£†‚°Ä‚¢Ä‚£§‚°≠‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚†ü‚£ø‚°á‚£ø‚£ø‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ò‚£õ‚°ê‚£ø‚°ø‚£â‚£â‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£≠‚£Ω‚£∑‚£ø‚£ø‚£æ‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£ø‚£ø‚°ü‚¢ã‚°ç‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ñ‚†∞‚¢∏‚°è‚†Ñ‚†à‚†Å‚†Ñ‚£ø‚£ø‚£ø‚¢æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ñ‚£∏‚£ß‚°Ä‚†Ñ‚†Ñ‚£º‚£ø‚£ø‚°ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°≥‚¢å‚£ã‚°®‚†â‚†à‚†â‚¢Å‚£¶‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¥‚£¶‚£Ä‚£Ä‚£¥‚£æ‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∞‚¢∏‚£ø‚£ø‚†è‚£Ω‚£ø‚£ø‚°∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∏‚¢∏‚£ø‚£ø‚†Ñ‚†õ‚†õ‚¢ü‚£µ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°à‚°Å‚†à‚†Ñ‚†Ñ‚†Ñ‚£¥‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚¢∫‚¢¶‚£å‚†ñ‚£æ‚£ø‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£é‚£Ä‚†ô‚°ó‚†õ‚†õ‚£ß‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£≠‚£≠‚£¥‚¢ø‚£ø‚†ø‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†§‚°ø‚†Å‚†ê‚†ã‚†Ñ‚£ø‚£ø‚£ø‚£ø‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚¢Ä‚£á‚†Ñ‚†Ñ‚¢Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢ü‚†õ‚¢≥‚¢∂‚†ü‚†õ‚†ã‚°â‚¢ù‚£µ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£â‚†Å‚†Ñ‚£Ä‚†∞‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ω‚¢ø‚†û‚£∫‚£ø‚°ø‚†æ‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£•‚£∂‚£Æ‚£¶‚£ï‚£¶‚£Ä‚£Ä‚£∏‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°±‚£Ø‚†Å‚†ô‚£ø‚£ø‚£ø‚¢è‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£¨‚°ß‚°ê‚£ø‚£ø‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£æ‚£Ø‚°ø‚¢ø‚£∑‚°ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ß‚£∂‚£ø‚°ø‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†´‚††‚£ø‚†ã‚†Ñ‚†ñ‚†ò‚£ø‚£ø‚£ø‚£ø‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ñ‚°á‚†Ñ‚†Ñ‚†Ñ‚¢∞‚£ø‚£ø‚£ø‚£ø‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£º‚°É‚†Ñ‚†Ñ‚†Ñ‚†à‚†â‚†â‚¢©‚£´‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ø‚£Å‚†Ñ‚¢Ä‚¢†‚°¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ª‚£ø‚£ø‚£ø‚°ü‚¢ª‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ª‚£ø‚£ø‚£ø‚£ø‚†ê‚£ø‚£è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ò‚°ç‚†â‚£ø‚£ø‚£¥‚£ø‚£ø‚¢æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚°Ü‚¢†‚£ø‚£ø‚°ó‚£Ä‚£≠‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢†‚†ò‚†õ‚¢ø‚£á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ù‚°≥‚£∑‚£ø‚°ø‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚¢©‚°ø‚†ã‚††‚†Ü‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚¢Ä‚°á‚†Ñ‚†Ñ‚†Ñ‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚¢ø‚†ü‚°í‚†í‚†à‚†â‚†â‚†õ‚°π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚°ã‚†Ñ‚†Ñ‚†Ñ‚¢†‚£†‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ì‚†â‚†Ñ‚£≤‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ª‚£©‚¢û‚£Ø‚£ø‚£ø‚†ü‚†â‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£è‚¢ø‚£ø‚°ø‚†ü‚£¥‚£∂‚£∑‚¢ü‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚¢Ä‚¢∏‚£Ø‚£ø‚£µ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚°õ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢∂‚£æ‚¢ü‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚°ø‚£ø‚£ø‚°ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†í‚£ø‚†è‚†ê‚†ì‚†Ñ‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚£†‚£Ø‚†Ñ‚†Ñ‚†Ñ‚£†‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢ã‚£ã‚†Å‚†Ñ‚†Ñ‚†Å‚†à‚¢Å‚£©‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°∑‚£¥‚£Ñ‚£†‚£∞‚£¥‚°æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£±‚£ø‚£ø‚£ø‚£ø‚†ô‚£ø‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚¢π‚°ø‚£ø‚£ø‚£ø‚£Å‚†ò‚£ü‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¨‚†Ñ‚†Ñ‚¢®‚£ø‚£•‚£§‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢ø‚£¶‚°û‚†ø‚£ø‚°á‚£∂‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£º‚£ø‚††‚£é‚£â‚£Ø‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£∂‚£Ω‚£ø‚£ø‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†∞‚†Ü‚†∏‚£ø‚¢´‚†Ñ‚†Ñ‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£á‚†Ñ‚†Ñ‚£∏‚£Ø‚†Ñ‚†Ñ‚†Ñ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ù‚†â‚¢ß‚£ô‚£ã‚†µ‚†ñ‚°ö‚¢è‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚°ü‚†õ‚°Ü‚†Ñ‚¢Ä‚£§‚°∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£ø‚£ø‚£ø‚°Ñ‚†à‚†ª‚†ø‚¢õ‚£ª‚£Æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ô‚£â‚°õ‚£ø‚†Ñ‚†Ñ‚¢∞‚£ø‚£ø‚°è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£ø‚£Ñ‚¢Ä‚°Ä‚°à‚£π‚°±‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°ø‚¢ø‚¢∏‚†â‚†Å‚¢ª‚¢±‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£∑‚£¨‚£ø‚£ø‚£∑‚£Ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚°ø‚¢õ‚†õ‚¢ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†ô‚†Å‚†à‚£ø‚†£‚†Ü‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£è‚¢ø‚†ß‚£Ä‚£Ä‚£¥‚£ø‚°Ñ‚†Ñ‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ö‚†Ñ‚†±‚†¨‚†ç‚†ú‚¢õ‚£©‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£Ω‚£ø‚£¶‚£§‚£æ‚£æ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢±‚¢†‚£ø‚£ø‚£ø‚£ø‚£∑‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢≥‚£è‚£∏‚°õ‚†ª‚†ø‚†ø‚¢ø‚°∑‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£¨‚°Ω‚£∑‚£§‚£§‚¢†‚£æ‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢±‚¢ø‚£ø‚†ü‚†ò‚†ª‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†∏‚£º‚£º‚£Ü‚£í‚££‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£øÔøΩÔøΩ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ω‚£ø‚°è‚†∞‚†Ü‚†à‚¢ª‚£ø‚°ã‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ª‚£ø‚£∑‚†Ñ‚†Ñ‚†Ñ‚£∏‚°è‚†Å‚†Ñ‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ö‚†à‚†ô‚¢∂‚°ö‚†õ‚¢ª‚°§‚£≤‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£Ø‚£¶‚£Ä‚†à‚£≠‚£±‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£æ‚£ü‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£π‚£ø‚£ø‚£ø‚£ø‚†ô‚¢ª‚¢è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢õ‚†õ‚£´‚£Ö‚†Ñ‚£º‚°é‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†é‚£ø‚£ø‚¢ø‚£Ä‚°à‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚£æ‚£¨‚£á‚¢ø‚£æ‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢π‚£ø‚†É‚†≤‚†Ç‚†ô‚£ø‚£ü‚†â‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∏‚°ø‚¢á‚†Ñ‚†Ñ‚¢Ä‚£ø‚°Ä‚†Ñ‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ç‚°Ñ‚†Ñ‚†Ñ‚£ô‚£õ‚£≥‚¢ñ‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ª‚£∂‚£Ñ‚£à‚£≠‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£º‚£ø‚¢π‚£ø‚£ø‚£ø‚¢ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£Ω‚£ø‚°ç‚¢ø‚£ø‚°ø‚¢≤‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ú‚°ø‚†ø‚£ß‚£§‚¢§‚°Ñ‚£æ‚£æ‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ó‚£á‚†Ñ‚£®‚¢á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢π‚£¨‚£ø‚£ø‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚°ø‚¢ã‚°õ‚¢ø‚£ø‚£ø‚†ü‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£π‚°á‚†Ñ‚†Å‚†Ñ‚£ª‚†É‚†É‚†Ñ‚¢à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°ª‚£§‚£Ä‚£¥‚£ø‚£¶‚£Ä‚£†‚¢æ‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢Æ‚£π‚£∂‚£∂‚£æ‚°´‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢°‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚¢õ‚£ç‚†õ‚†ª‚£ø‚£ø‚¢æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚£á‚£ø‚°ø‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†∏‚£≠‚¢ø‚°Ø‚£ø‚£∑‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚†ü‚†õ‚¢ø‚£ø‚°ø‚†õ‚†ô‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢é‚†Ñ‚†â‚†Ñ‚£ø‚†Ñ‚†â‚†Ñ‚¢Ä‚£ø‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ú‚¢Ü‚£Ä‚¢¥‚£ø‚£¶‚£Ä‚£§‚£æ‚¢ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ù‚£∑‚†∂‚†æ‚£ø‚£≠‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚¢¥‚£ø‚£ø‚°ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°¶‚£©‚£≠‚£Ä‚†à‚†õ‚°ü‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°∏‚£ø‚£ø‚°ô‚†õ‚£ø‚£á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚£ª‚£ø‚£º‚°á‚¢ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£°‚£Ω‚°é‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚°û‚¢â‚°â‚¢ª‚£ø‚°ø‚†õ‚†ª‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Å‚¢∏‚°ü‚†ò‚†Å‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°ª‚£¶‚°¥‚£ø‚†ø‚£Ñ‚£†‚£¥‚¢ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£é‚£ù‚†í‚£ö‚£ü‚£≠‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢±‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†µ‚¢π‚°ü‚†õ‚†õ‚†ª‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚¢ø‚£ø‚£ó‚†á‚†æ‚°ø‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ò‚£ª‚£ó‚¢â‚£ß‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ü‚£õ‚£´‚£¨‚£≠‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚¢°‚°à‚†π‚£ø‚°ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢º‚£ø‚£Ü‚†Ñ‚†Ñ‚¢Ä‚£ø‚†ê‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°ô‚†ª‚£∑‚£û‚†ª‚†ø‚£ß‚£§‚£¥‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£Ü‚£ù‚†ª‚¢ø‚£ø‚£ø‚£©‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°±‚¢ø‚£ø‚£ø‚†Ö‚†ô‚†ø‚¢ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚¢©‚£Ω‚£∂‚£∂‚£¥‚£≥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£º‚°ø‚†ø‚¢ø‚£ø‚£Ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∑‚£ø‚£ø‚£∂‚°∏‚†õ‚¢õ‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¨‚£ø‚£Ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢©‚°ç‚†ô‚£ø‚£ø‚†ü‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°º‚£ø‚£á‚†Ñ‚†Ñ‚†Ñ‚¢∏‚°ü‚†É‚†Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ú‚¢ø‚¢∂‚£§‚†¥‚£ø‚¢∑‚£Ä‚°†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∞‚°ô‚†≥‚¢∂‚†´‚£Ω‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚°é‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚°π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚¢ª‚†è‚†â‚†ª‚¢ø‚£ø‚£ø‚£æ‚°ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†î‚¢∂‚£∏‚£∂‚£ø‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£Ü‚£∏‚£ø‚£ø‚£ø‚¢º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£û‚£ø‚£ø‚££‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø   `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'thejungle") {
        if (!block) {
            client.action(channel, `The Jungle isnt just a place; its a sanctuary where we put our problems aside and enjoy watching the gaming warlord juicer. Youve changed more lives than you think Mr. Cow, xqcL   `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }



   
    if (message == "'tf") {
        if (!block) {
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚†õ‚†õ‚†õ‚¢õ‚°õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚°ø‚†ã‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£§‚£â‚†õ‚¢ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚¢Å‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚£ø‚£ø ‚£ø‚†ü‚¢Å‚£ö‚£ª‚£ø‚£ø‚£ø‚°ü‚¢Å‚£Ä‚£Ä‚°≤‚¢¶‚°ù‚¢ø‚£ø‚£ø‚†ø‚†õ‚†â‚†â‚£ô‚£ª‚£ø‚£ø‚£∑‚£å‚†ª ‚¢Å‚£¥‚°ø‚£©‚£∂‚†∂‚£≠‚£ù‚£õ‚£õ‚£≠‚£ø‚£ø‚£∑‚£∂‚£ø‚£ø‚£ø‚°Ü‚¢æ‚£ø‚£ø‚†ø‚†ü‚£ª‚£ü‚£ø‚£ø‚°Ü ‚†à‚£ø‚£á‚£ø‚£≠‚†∞‚£Æ‚£ç‚°õ‚†ø‚¢ø‚£ø‚£ø‚°è‚£º‚¢ø‚¢ø‚£ø‚£ø‚°∂‚£â‚£ª‚£ø‚£ø‚†è‚¢ª‚£ø‚£ø‚†É ‚£¶‚°à‚¢ª‚£ø‚£ø‚£ß‚°à‚£ù‚°â‚†ª‚¢∑‚£∂‚°å‚£©‚£õ‚£õ‚†ª‚†ø‚†•‚†æ‚†ø‚°õ‚¢ã‚£Å‚£Ñ‚¢∏‚£ø‚†É‚£º ‚£ø‚£ø‚£Ü‚¢π‚£ø‚£ø‚£∑‚£ç‚†≥‚£∂‚£∂‚£§‚¢Ä‚£ô‚†õ‚†õ‚†â‚†õ‚†õ‚†ò‚†õ‚†õ‚†â‚†Å‚†Ñ‚¢∏‚£ø‚†Ñ‚£ø ‚£ø‚£ø‚£ø‚£¶‚°ô‚¢ø‚£ø‚£ø‚£∑‚£Æ‚£ô‚†õ‚¢º‚£ø‚£ø‚°á‚£∂‚£∂‚°Ü‚£§‚£§‚£†‚†Ñ‚°§‚†Ñ‚£º‚£ø‚†Ñ‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£à‚†õ‚†ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£Æ‚£•‚£¨‚£≠‚£•‚£≠‚£§‚£§‚£∂‚£∂‚£ø‚£ø‚£ø‚°Ñ‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£å‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£¨‚£ç‚£â‚°õ‚†õ‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†õ‚£Å‚£º‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø

        `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }



    if (message == "'spider") {
        if (!block) {
            client.action(channel, `‚£ø‚°ø‚†è‚£©‚£∑‚£ü‚£Å‚†Ñ‚¢∏‚£∑‚£ø‚°á‚£Ä‚¢π‚£ø‚†Ñ‚†Ñ‚£à‚†ª‚£∑‚°ç‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚°á‚£ø‚¢ü‚£π‚£ø‚£∑‚£û‚£Å‚†∂‚£π‚°á‚£ø‚¢∏‚£ø‚£ø‚°á‚†ø‚£∂‚£∂‚£à‚†ª‚£∑‚°å‚¢π‚£ø‚£ø‚£ø‚£ø ‚£ø‚£∑‚£∂‚£æ‚£ø‚£ø‚£ø‚£∑‚£ø‚¢∏‚†ü‚£Å‚£ø‚£ò‚£É‚£ò‚¢ª‚£á‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚†ª‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£è‚£©‚£•‚£ø‚†ü‚†õ‚†É‚£Ä‚£Ä‚£Ä‚£¥‚£¶‚†π‚¢ø‚£∑‚°ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚°è‚£Ω‚¢ø‚£ü‚°±‚†ñ‚£†‚£æ‚†ü‚¢ø‚°ü‚£õ‚¢ø‚£ø‚£Ñ‚†Ñ‚£ò‚†£‚°ç‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£∑‚£∂‚£æ‚£ø‚£á‚£ò‚£õ‚£Å‚¢†‚£æ‚°á‚£ø‚£ò‚£õ‚†õ‚¢ß‚£ç‚†Ñ‚†π‚£∑‚£ç‚†π‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚°á‚£∂‚£ø‚£ø‚£ø‚£∂‚£ò‚¢ª‚°á‚£∂‚£à‚†ª‚°∑‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£∑‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚°ø‚†ø‚†ø‚†è‚£°‚£¥‚£ø‚°ø‚†è‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£¥‚£∂‚£Ñ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚°è‚£•‚£ø‚¢ü‚£õ‚£õ‚£Å‚†∂‚¢Ä‚£∂‚£∂‚°¶‚¢¥‚£¶‚£ø‚°ü‚¢π‚£∑‚£ç‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£∑‚£∂‚£∂‚£æ‚£ø‚£ø‚†ø‚£∞‚°ü‚£ø‚°á‚£∂‚£ò‚£õ‚¢ø‚£ß‚°Ä‚†ò‚¢ª‚£Ü‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†á‚£æ‚°è‚†Ñ‚£ø‚°á‚£ø‚£ø‚£ø‚£∂‚£ò‚¢ª‚°á‚£∂‚£à‚†ª‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£∞‚°ü‚£É‚£ò‚£õ‚£É‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£∑‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚£ª‚£É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£øÔøΩÔøΩ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ü‚¢â‚†∏‚†ø‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚£ß‚°ç‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚°è‚£≠‚£ø‚£ß‚£æ‚¢ü‚£õ‚†Ñ‚£†‚£Ñ‚£Ä‚†Ñ‚†Ñ‚†Ñ‚¢æ‚°ø‚¢ª‚°Ñ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£∑‚£∂‚£ø‚£∑‚£∂‚£æ‚£ø‚¢∏‚£ø‚£ø‚°ü‚£É‚¢†‚£∂‚£Ñ‚†∂‚£∂‚£à‚†≥‚£ç‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£∏‚†á‚£ø‚£ß‚£ø‚£ò‚£õ‚¢ª‚°á‚†ø‚£ø‚£∂‚£à‚†ª‚°∑‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£æ‚°á‚£∂‚£ô‚£É‚£ø‚£ø‚£ø‚£∂‚¢∏‚£∑‚£ç‚£ø‚£ø‚£∑‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚£°‚°ü‚£Å‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢ø‚†á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚°ø‚†è‚£©‚£≠‚£≠‚£§‚£Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢†‚°Ñ‚†ò‚£É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚°è‚£•‚£æ‚°ü‚†ë‚£†‚°Ω‚†õ‚¢≥‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢†‚£§‚°ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£∑‚£Ü‚£ô‚£õ‚£õ‚£õ‚£Å‚¢†‚£∂‚£∂‚£Ñ‚†Ñ‚†Ñ‚°Ä‚¢∏‚°ø‚†£‚£≠‚£ç‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†â‚£º‚£ø‚£ø‚°è‚£Ä‚¢π‚£ø‚£Ñ‚†∂‚£∂‚£à‚£õ‚†≥‚°å‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£∏‚°ü‚£ø‚£ø‚£∂‚£ø‚¢∏‚°ø‚¢ª‚°á‚£ø‚£ø‚£ø‚£∑‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£æ‚£ü‚£Å‚£ø‚£ø‚£ø‚£ø‚¢∏‚£∑‚°ú‚¢£‚£ç‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚£°‚£ø‚†á‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£ò‚¢ª‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚£ô‚£Å‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£à‚£É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†ø‚†ò‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£á‚†ø‚†ø‚¢â‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£õ‚£õ‚†õ‚£∂‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚†õ‚£õ‚£õ‚£ã‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†ø‚†ø‚¢©‚†º‚¢ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£∑‚£ç‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚°è‚¢°‚¢ö‚£õ‚£õ‚£õ‚£Å‚¢†‚£§‚£∂‚°Ñ‚†Ñ‚¢†‚°Ñ‚¢∏‚°ø‚£õ‚£õ‚†£‚£≠‚£≠‚°ç‚¢π‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£∑‚£∂‚£æ‚£ø‚£ø‚£ø‚†ø‚£∏‚£ø‚£ø‚†á‚£Ä‚£Ä‚¢†‚£∂‚°Ñ‚†ø‚£ø‚£∂‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£æ‚£ü‚£Å‚£∂‚£∂‚£ø‚£ø‚¢∏‚£ø‚£ø‚£á‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£æ‚£ü‚£Å‚£ø‚£ø‚£ø‚£ø‚£ø‚£à‚†ª‚°ü‚†ª‚°á‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ô‚£Å‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚†∞‚£∑‚°ç‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£à‚£É‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚£ø‚£ò‚¢ø‚£∑‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚†õ‚†É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ø‚£¶‚£≠‚£â‚£∏‚°ø‚†É‚†Ñ‚†Ñ‚†Ñ‚¢∏‚°á‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£ô‚£õ‚†â‚¢†‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢£‚£≠‚£≠‚£≠‚°ç‚†π‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢©‚£º‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢†‚£æ‚£ø‚£ø‚£Ñ‚¢Ä‚£ø‚°∑‚¢∏‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢©‚£æ‚£ø‚£ø‚£∑‚°Ñ‚†Ñ‚¢†‚£§‚£ø‚°è‚£à‚£õ‚£õ‚£ã‚£∞‚£æ‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†á‚¢∏‚†ü‚£°‚£º‚†ü‚¢ª‚°ü‚£Ä‚¢∏‚£ø‚£ø‚°á‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚°ø‚†á‚£∏‚£¶‚£æ‚£ø‚£∑‚£º‚£ø‚£Å‚£ø‚£à‚†ª‚£ø‚£ø‚°á‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£á‚£ò‚£õ‚£õ‚£â‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£à‚†ª‚£ß‚°ç‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚†à‚£∑‚°å‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢∏‚°á‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚°ø‚£É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚°ü‚¢ø‚£ø‚£Ø‚£æ‚°ø‚£¶‚£æ‚£á‚†Ñ‚†Ñ‚†Ñ‚¢†‚°ø‚†É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£Ø‚£ô‚¢ª‚†Ñ‚¢º‚°ø‚†ø‚†É‚†Ñ‚†Ñ‚¢†‚°Ñ‚†∂‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚†Ñ‚¢†‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢†‚°ñ‚£õ‚£õ‚£õ‚£õ‚£É‚£∏‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢©‚£æ‚£ø‚£Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£∑‚£ç‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢∏‚†ü‚†õ‚†õ‚£ø‚£á‚†Ñ‚¢†‚£§‚£æ‚°ü‚£õ‚£õ‚£õ‚£õ‚£É‚£∏‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ø‚£∑‚£û‚†Ñ‚£∂‚£æ‚£ø‚¢ª‚°ü‚†Å‚†∏‚£ø‚£ø‚°á‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£á‚£ò‚°õ‚¢°‚£æ‚†ø‚£ø‚£ø‚¢∏‚°ü‚£Ä‚£∂‚£æ‚£â‚†ª‚£∑‚£ç‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£ø‚£ø‚¢∏‚†á‚£ø‚£ø‚£ø‚£ø‚£∂‚£à‚†ª‚£∑‚°å‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢©‚£≠‚£≠‚£≠‚°ç‚†ø‚¢∏‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢©‚£ø‚£Ø‚°â‚£∏‚°è‚†â‚†â‚†â‚¢π‚£ø‚°ø‚£É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚°è‚¢©‚£≠‚£π‚°∂‚£ø‚£ô‚¢ø‚£ø‚£á‚†Ñ‚†Ñ‚†Ñ‚¢†‚°ø‚†É‚£ø‚£ø‚£ø‚°ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£∑‚£Ü‚£ô‚°ø‚¢Ø‚£≠‚°â‚†ò‚†õ‚†ø‚†É‚†Ñ‚†Ñ‚¢∏‚°á‚†Ñ‚£â‚£≠‚£≠‚£µ‚°∑‚¢∏‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£ô‚£õ‚£É‚¢∏‚°á‚†Ñ‚†Ñ‚†Ñ‚¢†‚°Ñ‚†ò‚£ã‚£Ä‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢©‚£≠‚£º‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢£‚°ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚£ü‚£©‚£≠‚†ò‚£õ‚¢ª‚£∑‚£§‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£∑‚£ç‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£á‚£ò‚£ø‚£ü‚£Å‚£∂‚£ø‚¢∏‚£ø‚£Ñ‚†ò‚†ª‚£ø‚£ø‚£∑‚£å‚†ª‚£∑‚£å‚†π‚¢ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢©‚£º‚†ü‚¢ª‚°á‚£∂‚£æ‚£∑‚£à‚†ª‚£∑‚£º‚£ø‚°∑‚†∏‚¢ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£º‚°á‚£∂‚¢∏‚°á‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£∂‚£Ü‚£É‚£∏‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£ø‚°á‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£õ‚†ª‚†É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢©‚£≠‚°â‚£ø‚†ø‚¢©‚£≠‚£≠‚£≠‚°ç‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£ø‚¢Ø‚°â‚¢∏‚°è‚†Ñ‚†Ñ‚†Ñ‚¢π‚°á‚†ø‚†ø‚†â‚°ç‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ò‚¢ø‚£ø‚£á‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£∑‚°î‚†õ‚†É‚†Ç‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ò‚†õ‚†õ‚†É‚†Ñ‚†Ñ‚†ò‚¢ø‚£∑‚£¥‚°ø‚£É‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚£©‚£ç‚†Ñ‚†ò‚†É‚†Ñ‚†Ñ‚¢†‚°Ñ‚†Ñ‚†∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚£°‚£æ‚°ü‚†õ‚¢ø‚£∑‚£∂‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚¢π‚£ø‚£∑‚°ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢ø‚£ß‚£æ‚†ü‚£ã‚¢π‚£ø‚£Ñ‚†Ñ‚†Ñ‚£†‚£∂‚°ü‚†õ‚†ß‚£ç‚†π‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£∂‚£∂‚£ø‚¢∏‚£ø‚£ø‚°Ñ‚£ò‚¢ª‚£ø‚£∑‚£§‚£§‚£º‚£∑‚£å‚†π‚¢ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚°á‚¢∏‚°á‚£ø‚¢∏‚£è‚†∂‚£∂‚£∂‚£∂‚£∂‚£Ü‚°≥‚£¨‚¢π‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢©‚£æ‚°á‚£∂‚£∂‚£ø‚£∂‚¢∏‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£æ‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚°á‚£∂‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢©‚°â‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ò‚£ø‚°¶‚†ø‚†ø‚¢©‚°ç‚†â‚¢©‚°ç‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ô‚¢ø‚°Ü‚¢∏‚°á‚†Ñ‚†Ñ‚†Ñ‚¢∏‚°á‚¢â‚£≠‚£ç‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ò‚¢ª‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚°ø‚†õ‚†ª‚£ø‚°ø‚¢ã‚£∏‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ä‚¢π‚£á‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢ø‚£∑‚°î‚£É‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£ø‚£ø‚£Ø‚£≠‚£≠‚£º‚°ø‚†É‚†Ñ‚†Ñ‚¢†‚°Ñ‚†Ñ‚†∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚°è‚¢°‚£π‚°ø‚£∑‚£†‚°ú‚¢ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£∑‚£ç‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£∑‚£ñ‚£ø‚£ü‚£ø‚£ü‚£Å‚¢∏‚£∑‚£§‚£Ñ‚†Ñ‚†Ñ‚£∏‚°á‚£à‚†ª‚£∑‚£¨‚£ç‚†π‚¢ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚°ü‚£õ‚¢ª‚£ø‚£ß‚£ç‚†∂‚£∂‚£é‚°ª‚£∑‚°å‚¢π‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£∏‚°ü‚£õ‚£É‚£ø‚†∏‚£ø‚°ú‚†ª‚£∑‚£ç‚†π‚¢∑‚£∂‚£∂‚£æ‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚°ü‚£Å‚£ø‚£ø‚£ø‚£∂‚†∏‚°á‚£∂‚£à‚£õ‚£É‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚†á‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚°Ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ß‚°â‚£ø‚¢©‚£≠‚£≠‚£≠‚°ç‚†ø‚†ø‚¢ø‚£â‚£ç‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚¢π‚°á‚£©‚°º‚†ã‚†â‚†â‚¢π‚£∑‚£¥‚°ø‚£ø‚£ã‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ò‚¢ø‚£ø‚£á‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢ø‚°è‚£∂‚£ø‚°ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚¢©‚£≠‚°â‚†ø‚†Ñ‚¢π‚£ø‚†É‚†Ñ‚†Ñ‚¢†‚°û‚†É‚¢â‚£≠‚°Ñ‚¢õ‚£ã‚£π‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£ô‚£õ‚¢ø‚£∂‚£æ‚°ø‚†É‚†Ñ‚†Ñ‚†Ñ‚¢†‚£ñ‚†õ‚£ã‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚†∂‚£π‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£∑‚£≠‚£ç‚†π‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢∏‚£ø‚£∑‚£∂‚£Ñ‚†Ñ‚£†‚£§‚¢π‚°è‚£à‚£õ‚°ª‚£ø‚£∑‚°å‚¢π‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢©‚£æ‚†á‚¢†‚£ø‚£ø‚°ü‚£õ‚£õ‚¢ª‚£§‚°Ñ‚£ø‚£ø‚£∑‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚¢©‚†ò‚£Å‚†∂‚¢∏‚°ü‚£É‚£∂‚£ø‚£ø‚¢∏‚£ø‚£∑‚£ç‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢æ‚†Ñ‚£∂‚£ø‚£æ‚£ø‚£Å‚£ø‚£ø‚£ø‚£ø‚£à‚†ª‚°ø‚†ª‚°á‚†∏‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£ø‚£ø‚£ô‚£Å‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚†Ñ‚£∑‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚¢©‚°ç‚†ø‚†ø‚†ø‚¢º‚£ø‚£õ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚°ø‚†ã‚†Ñ‚¢∞‚£á‚£∞‚°ø‚£ã‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚¢©‚°â‚†ø‚£©‚°â‚†ø‚¢∏‚°á‚†Ñ‚†Ñ‚†Ñ‚£π‚£ø‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚°ò‚¢ø‚£ø‚°ü‚£ø‚£¶‚£º‚°á‚†Ñ‚†Ñ‚†ò‚¢ø‚°è‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£ô‚£õ‚¢ø‚†ø‚†ã‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢£‚£§‚£≠‚£≠‚£≠‚£ç‚†π‚†ø‚†ø‚¢ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚†Ñ‚†ò‚†É‚†Ñ‚†Ñ‚†Ñ‚¢†‚£ø‚¢ø‚°ø‚†å‚†õ‚†ª‚£ø‚°∑‚¢∏‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†â‚£∏‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£π‚°è‚£à‚£õ‚£õ‚£É‚£∞‚£∂‚£æ‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£©‚°ú‚†õ‚¢£‚£æ‚£ø‚°á‚£à‚¢ª‚£ø‚£á‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£æ‚£ü‚¢£‚£æ‚£ø‚£õ‚¢ª‚°á‚£ø‚†∏‚£ø‚£ø‚£á‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢∏‚°è‚£ø‚£ò‚£â‚£ø‚£ø‚¢∏‚°á‚£ø‚£∂‚¢∏‚°ø‚†ª‚£ß‚†à‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚°ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢©‚£æ‚°ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢©‚£≠‚£≠‚°ç‚†ø‚¢â‚£Ω‚°ø‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†ø‚†ø‚†ø‚£ø‚¢∏‚°á‚†Ñ‚†Ñ‚¢∏‚£∑‚£º‚°è‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚°ò‚¢†‚°ò‚¢ø‚£¶‚°â‚¢∏‚°á‚†Ñ‚†Ñ‚¢†‚£ø‚°ø‚†É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ò‚£ø‚£¶‚°Ä‚¢∏‚°ø‚†É‚†Ñ‚†Ñ‚†ò‚¢ø‚°á‚†∂‚†ø‚†ø‚¢ø‚£ø‚†ø‚¢ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ô‚£õ‚†õ‚¢∑‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢∑‚£∂‚°ø‚£õ‚£ª‚£ø‚°É‚†∏‚¢ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢†‚£º‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£∑‚£≠‚£≠‚£≠‚°•‚¢É‚£∏‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£†‚£æ‚£ø‚†É‚†Ñ‚†Ñ‚†Ñ‚£†‚£∂‚£Ñ‚†Ñ‚£∂‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£©‚£æ‚°ü‚†Å‚¢∏‚£∑‚£æ‚°á‚£ò‚¢ª‚£ø‚£ø‚£á‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£æ‚°ü‚£Å‚£ò‚£õ‚£õ‚£É‚¢∏‚°á‚£ø‚£à‚¢ª‚°ø‚¢ª‚£∑‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚†ø‚†ø‚£ø‚£ø‚£¥‚£∑‚¢º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚°ø‚†ø‚¢â‚°î‚†õ‚†õ‚¢ª‚°á‚†ø‚†ª‚°ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£ô‚¢ª‚£¶‚£º‚°á‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚°á‚£∂‚£ø‚£ø‚°ø‚†ø‚†ø‚¢ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ò‚¢ø‚£ø‚£ß‚†Ñ‚†Ñ‚†Ñ‚¢∏‚°ø‚†É‚†ø‚¢ã‚£≠‚£•‚£ø‚¢É‚£∏‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†∂‚†ô‚¢ª‚£¶‚†Ñ‚†Ñ‚†ò‚†ü‚°ò‚†ü‚£ã‚£∞‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚£©‚£≠‚£≠‚£≠‚£æ‚£∑‚£Ä‚°Å‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢ß‚°Ñ‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚£ò‚£õ‚†Å‚†∂‚†Ñ‚†ô‚¢ø‚£ø‚£ü‚°Ä‚†Ñ‚†Ñ‚°Ä‚¢†‚£∑‚£Ü‚†∏‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚°ü‚£É‚†Ñ‚†ª‚†ø‚£ø‚£∂‚£æ‚£ø‚¢∏‚£ø‚£å‚°≥‚£å‚¢π‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£¶‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚¢©‚°î‚†õ‚¢£‚°ç‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ô‚¢ø‚°Ü‚£∏‚£ß‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£á‚¢â‚£≠‚£ç‚†π‚¢è‚£≠‚¢π‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ò‚¢ø‚£ø‚°ø‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚†õ‚£ø‚°ø‚¢ã‚£∞‚£æ‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚†Ñ‚†Å‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†ô‚°ø‚†ü‚£ã‚£∞‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£©‚£≠‚£≠‚£≠‚£Ñ‚°∫‚†ü‚†Ñ‚†Ñ‚†Ñ‚†ò‚†á‚°Ä‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£æ‚°ü‚£Å‚£∂‚†ô‚†ø‚£∑‚£¶‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£∑‚£å‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ô‚£ø‚°¶‚†ø‚£ø‚£ø‚†ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ô‚¢ø‚°Ü‚£ø‚¢©‚£¥‚†ø‚†Ç‚¢©‚°ç‚†ø‚¢ø‚£ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ß‚°ç‚†Ñ‚†Å‚†Ñ‚†Ñ‚†ò‚¢ß‚£¥‚°ø‚£ø‚°É‚¢Ä‚£ø‚¢∏‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚†ô‚¢ø‚£∑‚£¶‚†Ñ‚†Ñ‚†Ñ‚¢∏‚°è‚†∂‚¢ã‚°µ‚¢ã‚£∞‚£æ‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£ø‚°ø‚†ø‚†∂‚†ò‚¢ª‚£ß‚†Ñ‚†Ñ‚†Ñ‚†ò‚£ø‚°∂‚£ã‚£∞‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ò‚£ø‚£ü‚£õ‚¢ø‚£∑‚£æ‚£ø‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢ß‚£Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢©‚£≠‚£≠‚°ç‚†ø‚†ø‚¢¥‚£ø‚£É‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚†â‚†â‚†ô‚¢ß‚£§‚£æ‚£ã‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢©‚°ç‚†ø‚¢∏‚°ø‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ò‚¢ø‚£¶‚°ú‚£õ‚¢£‚£§‚£§‚£¶‚†Ñ‚†Ñ‚†ò‚†ã‚£Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∞‚£ø‚¢É‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢©‚£≠‚°ç‚†ø‚†ø‚¢∏‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ò‚†ü‚†â‚†π‚¢ß‚£§‚£æ‚£ã‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ò‚£∂‚£ø‚£ø‚£Ø‚°ç‚¢∏‚£∑‚†Ñ‚†Ñ‚†Ñ‚†à‚†π‚†è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∞‚£∑‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢©‚£≠‚°ç‚†ø‚¢â‚£º‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢©‚£º‚†ü‚†â‚†Å‚¢†‚£º‚£ø‚†è‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'okayeg") {
        if (!block) {
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚†â‚†â‚†â‚£©‚°è‚°ò‚£Ø‚°à‚†ô‚¢ø‚£ø‚£õ‚£©‚£§‚£§‚£≠‚£Ω‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢ø‚°á‚¢°‚£ø‚£ø‚£¶‚†à‚†ë‚£ø‚£ø‚£ø‚†â‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚°ø‚†ø‚†ã‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†â‚†ö‚†ø‚¢ø‚°ø‚†Ñ‚†Ñ‚†â‚¢ø‚£ü‚†Ñ‚£ø‚£ø‚£ø‚£ø ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†π‚†æ‚†ø‚†ã‚†Ñ‚£ø ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏ ‚¢†‚£∂‚£∂‚†¢‚£Ñ‚£Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏ ‚†ò‚¢ø‚£ø‚£∑‚£Æ‚°π‚£∑‚£¶‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò ‚†Ñ‚†Ñ‚†à‚¢ø‚£ø‚£ø‚£é‚°õ‚†ø‚£∑‚£¶‚£Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚£¶‚£§‚£Ä‚†Ñ‚†à‚†õ‚†ø‚£ø‚£∑‚£Æ‚£ç‚£õ‚†ø‚¢ø‚£∂‚£∂‚£¶‚£Ñ‚£Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£† ‚£ø‚£ø‚£ø‚£ø‚£∂‚£¶‚£Ñ‚°Ä‚†â‚†â‚†â‚†õ‚†ª‚¢∑‚£¶‚£≠‚£≠‚£ô‚£õ‚£õ‚†∑‚†∂‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚¢é ‚£ø‚°ü‚£©‚£∂‚£∂‚£¶‚°ô‚¢ø‚£∑‚£¶‚£Ñ‚°Ä‚†Ñ‚†Ñ‚†à‚†â‚†â‚†â‚†õ‚†õ‚†õ‚†õ‚†õ‚†ø‚†ø‚¢ø‚£ø‚°ø‚¢ø‚£ø ‚°ü‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£§‚£§‚£Ä‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£Ä‚£∞‚£æ‚£ø‚£ø ‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚†ã‚£≠‚°ô‚¢ø‚†ã‚£©‚°ù‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£∑‚°ò‚¢ø‚£ø‚£ø‚£ø‚†ø‚£É‚£ø‚£ø‚°Ä‚†∂‚†í‚£æ‚°Ä‚†ª‚†è‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£∂‚£Æ‚£≠‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ç‚£â‚£Å‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'lule") {
        if (!block) {
            client.action(channel, `‚†ã‚£Å‚£Ä‚£Ä‚°à‚†ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á ‚£ø‚£ø‚¢ü‚£õ‚£ø‚£ø‚°≤‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†õ‚†õ‚†õ‚†õ‚†õ‚†ª‚£ø‚£ø‚£ø‚°á ‚£ø‚°á‚†æ‚†õ‚†õ‚†õ‚†õ‚†Ñ‚¢ª‚£ø‚£ø‚£ø‚£ø‚°ç‚†â‚†â‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£§‚¢§‚£Ñ‚£Ä‚†Ñ‚†Ñ‚†à‚†â‚†Ñ ‚£ø‚£•‚£§‚£Ñ‚£Ä‚£†‚£∂‚£Ä‚£†‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ñ‚†Ñ‚£Ä‚£ê‚†ä‚†õ‚†õ‚†ª‚†ñ‚†Ñ‚†â‚¢Ä‚°Ä‚¢Ä‚°Ä ‚£ø‚£ø‚£ø‚£ø‚£ø‚£õ‚£â‚£µ‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ñ‚†Ñ‚¢≤‚£ø‚£ø‚£ø‚£≥‚†Ç‚†í‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†æ‚†ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°¶‚†Ñ‚†Ñ‚†à‚†ô‚†ª‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ª‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚†è‚£∞‚°ø‚†õ‚†õ‚†É‚†Ñ‚¢†‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚†ô‚£ø‚£ø‚£ø‚£¥‚°ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚†õ‚†í‚†Ñ‚†Ñ‚†ê‚†Ç‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚¢ª‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø ‚††‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚¢†‚£∂‚£æ‚£ø‚£ø‚£ø‚†ø‚°ø‚¢ø‚°ß‚£∂‚¢§‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø ‚£∂‚£ø‚£ø‚£ø‚°ü‚¢®‚†ô‚†Ñ‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£∞‚£ø‚°Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚¢ø‚£ø‚¢ü‚†π‚°Å‚£º‚°Ä‚£Ñ‚¢Ä‚£Ä‚†ê‚††‚¢Ñ‚£Ä‚£Ä‚£¥‚£∂‚£∑‚£∂‚£ø‚£ø‚£ø‚£ø‚°ø‚†ª‚£ø‚£ø‚£ø‚£ø ‚†à‚†Ç‚†Ñ‚†Ñ‚††‚¢ø‚£ø‚°ò‚£∫‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Ñ‚†Ñ‚†ª‚†æ‚°õ ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ç`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


if (message.toLowerCase().startsWith("'ping") && command === 'ping') {  
    if (!block) {
    const getUptime = new Date().getTime() - Date.parse(runTime)
    const botUptime = humanizeDuration(getUptime, { round: true })
    

    

    let channelTarget = channel.replace("#", "");

    const got = require("got")

        client.ping(channel).then(function (data) {
            console.log(data);
        
        
            client.action(channel, `FeelsDankMan üèì Pong! Latency is ${Math.floor(Math.round(data * 1000))}ms | Bot Uptime: ${botUptime} | RAM: ${Math.round(process.memoryUsage().rss / 1024 / 1024)}mb | Channels: ${client.getChannels().length}`)
        
            block = true;
            setTimeout(() => {
                block = false;
                }, (5 * 1000));
            })
        }
    }

   

    if (message == "'pingpong") {
        if (!block) {
            client.action(channel, `ppPing ppPong üèì PingPong `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    

    if (message == "'copetix") {
        if (!block) {
            client.action(channel, `‚†à‚†Ä‚†ê‚††‚†ê‚°Ä‚°Ç‚°¢‚°Ç‚¢Ü‚†™‚°ò‚†§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚¢Ä‚¢Ç‚¢Ö‚¢é‚¢¢‚¢ä‚¢î‚¢ï‚°é‚£ó‚°µ‚£ï‚£µ‚°±‚°†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚¢∞‚¢±‚¢ï‚£ó‚¢∑‚£Ω‚£æ‚£Ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚°Ñ‚†ã‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚¢ú‚¢ú‚¢µ‚¢ù‚£Ω‚¢Ø‚£ø‚£ø‚£ü‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚†å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚†å‚¢Ü‚¢á‚¢ü‚£û‚£ø‚£ª‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚°ò‚†î‚¢Ö‚¢£‚¢≥‚£Ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚°æ‚°ø‚†µ‚¢Ä‚†®‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ÄÔøΩÔøΩÔøΩ‚†Ä ‚£à‚†™‚†®‚°Ç‚†´‚°™‚°ì‚£ù‚¢Ω‚¢ô‚†ø‚£Ω‚°∫‚£∫‚£Ω‚£û‚°æ‚°¢‚°¢‚†Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚†π‚£é‚¢å‚°¢‚°ë‚£ù‚£ü‚£ø‚£Ω‚°é‚¢ú‚£ø‚£ù‚£ø‚£Ω‚£Ø‚¢Ø‚†Ç‚†à‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ç‚†ù‚£∑‚°π‚¢Æ‚£ª‚£Ω‚°ø‚°æ‚£π‚¢Æ‚£ª‚£ø‚£æ‚£Ω‚£Ω‚¢ß‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä ‚†Ä‚†°‚¢ä‚¢´‚¢∑‚°Ω‚£æ‚¢æ‚£ü‚†ù‚°æ‚†Ω‚£ø‚¢ø‚£ª‚°Ω‚°ï‚£†‚£∂‚¢ø‚£ª‚°∑‚°æ‚†∫‚††‚†Ä‚†Ä‚†Ä‚†Ä ‚†ê‚°à‚†Ä‚†ï‚°ç‚¢Ø‚¢ü‚°ø‚°Ω‚£ª‚¢Ω‚£ª‚°Ω‚°ø‚£Ω‚¢ß‚£ì‚°ü‚°•‚°ß‚°∂‚°¥‚£≤‚¢Ω‚°≤‚£≤‚£≤‚¢§‚°Ç ‚¢∏‚¢∂‚°à‚°ê‚†®‚¢ä‚¢ó‚°µ‚£ü‚£û‚£∑‚£ü‚£ø‚¢ø‚°Ø‚¢É‚°Ω‚°á‚¢Ø‚£ª‚¢Æ‚££‚°µ‚°∂‚°Æ‚£µ‚£≤‚£∫‚°Ç ‚†Ä‚†ç‚¢∑‚£î‚†à‚°Ä‚†Ç‚°ù‚£µ‚£≥‚£≥‚£è‚£ü‚£ø‚°É‚£æ‚°è‚†Ä‚£ü‚¢æ‚¢Ω‚£∫‚¢Ω‚¢Ω‚¢Ω‚£∫‚£∫‚£∫‚°Ç ‚†Ä‚†°‚°°‚¢ô‚†∑‚¢∂‚£¶‚£§‚£Å‚¢ì‚†µ‚°ª‚£∫‚°µ‚£ü‚†è‚†Ç‚°Ä‚†π‚†Ω‚†µ‚†º‚†≠‚†≠‚†Ω‚†æ‚†µ‚†ó‚†á `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message == "'trihard") {
        if (!block) {
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢´‚£ç‚£≠‚£•‚£∂‚£∂‚°∂‚†∂‚£≠‚£¥‚£¨‚£©‚£ç‚£õ‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚£•‚£ø‚£≠‚°ø‚†ø‚†ø‚†ü‚†ø‚†Å‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£∑‚£¨‚†π‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚°ø‚¢É‚£æ‚°ø‚†ü‚†â‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†õ‚†ª‚¢ø‚£∑‚†∏‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚°≤‚£ø‚£Ø‚†Å‚†Ñ‚†Ñ‚†Ñ‚£Ä‚£Ä‚†Ñ‚†Ñ‚¢Ä‚£Ä‚£Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†É‚†π‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚†É‚†º‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†æ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†§‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£á‚£§‚£Ñ‚†Ñ‚†Ñ‚£†‚£¨‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ñ‚†Ñ‚¢†‚£æ‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£á‚¢ø‚£ø‚†Ñ‚¢Ä‚£ø‚£ø‚£¥‚£Ö‚£º‚£ø‚£ø‚£ø‚°ø‚£ü‚†â‚°í‚†Ñ‚¢Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚†Ñ‚†Ñ‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£¥‚†Ñ‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ñ‚†à‚†õ‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ñ‚†õ‚£∞‚£æ‚£æ‚£ø‚£ø‚£ø‚£§‚†â‚£â‚†â‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ñ‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢Å‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†∏‚£ø‚£ø‚£ü‚£õ‚£õ‚†Å‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°â‚†õ‚†õ‚†õ‚£´‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    
    
    
    if (message == "'poki") {
        if (!block) {
            client.action(channel, `Simping for Pokimane isn't just a moment, it‚Äôs a lifestyle üí´ a reason to breathe ü§≤ an escape from this evil world filled with thieves üåè It‚Äôs art üñº the first gift you open on Xmas üéÅ a hug from a loved one ü§ó everything you‚Äôve ever wanted love üíó everything you need üíïü•∫`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message == "'lsco") {
        client.action(channel, `pepeLaugh üëâ https://i.nuuls.com/heLxR.png `)
    }


    if (message == "'crucialenjoyer") {
        client.action(channel, `EZ üëâ https://i.nuuls.com/3MH4j.png `)
    }

    if (message == "'pokilookingatyou") {
        if (!block) {
            client.action(channel, `‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ü‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£ø‚£ø‚†ø‚¢õ‚£©‚°≠‚†≠‚†≠‚†≠‚†≠‚¢ø‚£ü‚°ø‚¢ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†â‚†Å‚†ê‚†õ‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†â‚†ô‚†ª‚¢∑‚£∂‚£Ø‚°ª‚£ø‚£ø‚£ø ‚£ø‚£ø‚£ø‚£ø‚†ã‚†â‚†Ñ‚†Ñ‚¢Ä‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†õ‚¢ø‚£Æ‚°ª‚£ø ‚£ø‚£ø‚£æ‚†è‚†Ñ‚†Ñ‚†Ñ‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ß‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚†ø‚¢ü ‚£ø‚£ø‚†è‚†Ñ‚†Ñ‚†Ñ‚£†‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚£ü‚†ã‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£µ‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£à ‚°Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£ø‚£ø‚†ø‚†ü‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°â‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢ô ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£¶‚£§‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£§‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢ø‚°ø‚†Ñ‚†ª‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£ø‚£∑‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ª‚†ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢π‚£ø‚£ø‚£ø‚£ø‚£ã‚£•‚£∂‚£∂‚£§‚£§‚£∂‚£Ñ‚°Ä‚¢π‚£ø‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ ‚†Ñ‚¢Ä‚†Ñ‚†Ñ‚†Ñ‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ö‚†à‚†ô‚†ø‚†õ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†ë‚¢¶‚£Ñ `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }



    if (message.toLowerCase().startsWith("'pick") && command === 'pick') {
        if (!block) {
            let array = ["Yes Okayge", "No Okayge", "Maybe Okayge"]
            client.action(channel, ` @${user.username} ${array[Math.floor(Math.random() * array.length)]}`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'8ball") && command === '8ball') {
        if (!block) {
            let array = ["Yes Okayge", "No Okayge", "Maybe Okayge", "Surely Clueless", "Fuck You Bruh", "NOIDONTTHINKSO", "Copege I believe so", "YESIDOTHINKSO", "Clueless TeaTime", "Basedding no", "NOIDONTTHINKSO Never Doubt"]
            client.action(channel, ` @${user.username} ${array[Math.floor(Math.random() * array.length)]}`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

   if(message.toLowerCase().startsWith("'roll") && command === 'roll') {
        if (!block) {
            client.action(channel, `@${user.username} :tf: üëâ   ${Math.floor(Math.random() * 2) + 1}!`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'gaytest") && command === 'gaytest') {
        if (!block) {
            client.action(channel, `@${user.username} ${args.join(" ")} is  ${Math.floor(Math.random() * 100) + 1}% gay Okayge`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'lesbiantest") && command === 'lesbiantest') {
        if (!block) {
            client.action(channel, `@${user.username} ${args.join(" ")} is  ${Math.floor(Math.random() * 100) + 1}% lesbian Okayge`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'cock") && command === 'cock') {
        if (!block) {
            client.action(channel, `@${user.username} ${args.join(" ")} has ${Math.floor(Math.random() * 30) + 1}cm cock Okayge`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'vagina") && command === 'vagina') {
        if (!block) {
            client.action(channel, `@${user.username} ${args.join(" ")} 's vagina is ${Math.floor(Math.random() * 17) + 1}cm deep Okayge`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'iq") && command === 'iq') {
        if (!block) {
            client.action(channel, `@${user.username} ${args.join(" ")} has ${Math.floor(Math.random() * 269) + 1}iq FeelsDankMan`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'wedding") && command === 'wedding') {
        if (!block) {
            client.action(channel, `@${user.username} and ${args.join(" ")} will have wedding in ${Math.floor(Math.random() * 20) + 1} Years ${Math.floor(Math.random() * 11) + 1} Months ${Math.floor(Math.random() * 30) + 1} Days ${Math.floor(Math.random() * 59) + 1} Minutes üíí ‚ù§ üíç  Pag`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'swag") && command === 'swag') {
        if (!block) {
            client.action(channel, `@${user.username} ${args.join(" ")} has ${Math.floor(Math.random() * 100) + 1} % swag üòé `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'love") && command === 'love') {
        if (!block) {
            client.action(channel, `Love between ${user.username} and ${args.join(" ")} is ${Math.floor(Math.random() * 100) + 1}% PogChamp ‚ù§  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'depression") && command === 'depression') {
        if (!block) {
            client.action(channel, `@${user.username} ${args.join(" ")} is ${Math.floor(Math.random() * 100) + 1}% Depressed PoroSad üíî  `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.startsWith("ppBounce") && user['user-id'] === "654447790") {
        client.action(channel, "ppJump")
    }

    if (message.startsWith("ppCircle") && user['user-id'] === "625016038") {
        client.action(channel, "ppCircle")
    }

    if (message === "'mods" && user['user-id'] === "162760707") {
        if (!block) {
            client.mods(channel).then(function (data) {
                client.action(channel, "MODS are: " + data)
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            })
        }
    }
    

    if (message === "'vips" && user['user-id'] === "162760707") {
        if (!block) {
            client.vips(channel).then(function (data) {
                client.action(channel, `VIPS are: ` + data)
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            })
        }
    }

    if (message.toLowerCase().startsWith("'7tvsearch") && command === '7tvsearch') {
        if (!block) {
            if (args.join(" ") == []) {
                client.action(channel, 'No emote provided')
                ; return;
            }
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
            client.action(channel, `@${user.username} https://7tv.app/emotes?sortBy=popularity&page=0&query=${args.join(" ")} `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }

    }

    if (message.toLowerCase().startsWith("'bttvsearch") && command === 'bttvsearch') {
        if (!block) {
            if (args.join(" ") == []) {
                client.action(channel, 'No emote provided')
                ; return;
            }
            client.action(channel, `@${user.username} https://betterttv.com/emotes/shared/search?query=${args.join(" ")} `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'ffzsearch") && command === 'ffzsearch') {
        if (!block) {
            if (args.join(" ") == []) {
                client.action(channel, 'No emote provided')
                ; return;
            }
            client.action(channel, `@${user.username} https://www.frankerfacez.com/emoticons/?q=${args.join(" ")} `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'emotes") && command === 'emotes') {
        if (!block) {
            let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                client.action(channel, `@${user.username} https://e.wrnv.xyz/list/${channelTarget} RaccAttack : https://emotes.raccatta.cc/twitch/${channelTarget}`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message.toLowerCase().startsWith("'color") && command === 'color') {
        if (!block) {
            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                }

                const userData = userCheck.body
                const userColor = userData.chatColor
                
                if(userColor === null) return { reply: 'Default. (never set)' }

                const colorName = await got(`https://www.thecolorapi.com/id?hex=${userColor.replace('#', '')}`).json();

                client.action(channel, `${userColor} (${colorName.name.value}) `) 
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message.toLowerCase().startsWith("'logs") && command === 'logs') {
        if (!block) {
            let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
            client.color("Red")
            client.action(channel, `@${user.username} https://logs.apulxd.ga/?channel=${channelTarget}&username=${userTarget} or https://logs.ivr.fi/?channel=${channelTarget}&username=${userTarget}`)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }
  

    if(isModUp || user['user-id'] == '162760707') { 
        if (message.toLowerCase().startsWith("'massping") && command === 'massping') {
 
        const tChannel = channel.replace("#", "")
            let request = await got(`https://tmi.twitch.tv/group/user/${tChannel}/chatters`, { responseType: 'json' })
            if (!block) {
            let all = request.body.chatters
            let arr = [...all.viewers, ...all.vips, ...all.moderators]
            let msping = arr.values()
            for (let letter of msping) {
                client.action(channel, `${letter} ${args.join(" ") ?? 'TriHard'}`) 
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }
    }
}
 

    if (message.toLowerCase().startsWith("'retard") && command === 'retard') {
        if (!block) {
            client.color("Red")
            client.action(channel, `@${user.username} https://i.nuuls.com/Jiwv3.png , https://i.nuuls.com/4pmuF.png , https://i.nuuls.com/80WHA.png , https://i.nuuls.com/o3YH3.png , https://i.nuuls.com/qvNbP.png , https://i.nuuls.com/Qasua.png , https://i.nuuls.com/sU952.png , https://i.nuuls.com/PDVFk.png , https://i.nuuls.com/gRnsh.png , https://i.nuuls.com/N7F5g.png , https://i.nuuls.com/L9l4Y.png , https://i.nuuls.com/8MqtH.png , https://i.nuuls.com/q81Qw.png , `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


    if (message.toLowerCase().startsWith("'isbanned")) {
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            if (args[1]) {
                channelTarget = args[1];
            }

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/v2/twitch/user/${userTarget}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                }

                const userData = userCheck.body

            const userBanned = userData.banned
            const isbanned = userBanned
             
             if(isbanned == true) {
                client.action(channel, `${userTarget} Banned: ${isbanned} Reason: ${userData.banReason} MODS`)
                ;return;
                }

                client.action(channel, `${userTarget} Banned: ${isbanned} MODS`)
    
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'isbot")) {
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            if (args[1]) {
                channelTarget = args[1];
            }

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                }

                const userData = userCheck.body

            const userBot = userData.bot
            const isBot = userBot

                client.action(channel, `${userTarget} Bot: ${isBot} ;p `)
    
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'ispartner")) {
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            if (args[1]) {
                channelTarget = args[1];
            }

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                }

                const userData = userCheck.body

            const userpartner = userData.partner
            const isPartner = userpartner

                client.action(channel, `${userTarget} Partner: ${isPartner} ;p `)
    
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'isaffiliate")) {
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            if (args[1]) {
                channelTarget = args[1];
            }

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                }

                const userData = userCheck.body

            const useraffiliate = userData.affiliate
            const isAffiliate = useraffiliate

                client.action(channel, `${userTarget} Affiliate: ${isAffiliate} ;p `)
    
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }

    if (message.toLowerCase().startsWith("'whois")) {
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            if (args[1]) {
                channelTarget = args[1];
            }

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${username}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })
                
                
                if(!userCheck.body.id) {
                    client.action(channel, `This user does not exist.`) 
                ;return;
                
            
    }
                const userData = userCheck.body
                const userColor = userData.chatColor
                
            
            
            const userId = userData.id
            const userAvatar = userData.logo
            const userBio = userData.bio
            const userBanned = userData.banned
            const userPartner = userData.partner
            const userAffiliate = userData.affiliate
            const userBot = userData.bot

            const uid = userId
            const avatar = userAvatar
            const bio = userBio
            const isbanned = userBanned
            const isPartner = userPartner
            const isAffiliate = userAffiliate
            const isBot = userBot
            
            const creation = await got(`https://decapi.me/twitch/creation/${userTarget}`);
                let creationDate = creation.body

                if (userColor == null) {
                    if (userData.badge[0] == undefined){
                        client.say(channel, `@${user.username} ${userTarget}, Banned: ${isbanned}, Partner: ${isPartner}, Affiliate: ${isAffiliate}, Bot: ${isBot}, Badge: No badge, Avatar: ${avatar} , Color: Default color (Never set), Account created at ${creationDate}, id: ${uid}, bio: ${bio}`)
                    ;return;
                    } else {
                        let userBadge = userData.badge[0].title
                        let badge = userBadge
                    client.say(channel, `@${user.username} ${userTarget}, Banned: ${isbanned}, Partner: ${isPartner}, Affiliate: ${isAffiliate}, Bot: ${isBot}, Badge: ${badge}, Avatar: ${avatar} , Color: Default color (Never set), Account created at ${creationDate}, id: ${uid}, bio: ${bio}`)
                    ;return;
                    }
                }

            const colorName = await got(`https://www.thecolorapi.com/id?hex=${userColor.replace('#', '')}`).json();



                    if (userData.badge[0] == undefined){
                        client.say(channel, `@${user.username} ${userTarget}, Banned: ${isbanned}, Partner: ${isPartner}, Affiliate: ${isAffiliate}, Bot: ${isBot}, Badge: No badge, Avatar: ${avatar} , Color: ${userColor} (${colorName.name.value}), Account created at ${creationDate}, id: ${uid}, bio: ${bio}`)
                    ;return;
                    } else {

                    let userBadge = userData.badge[0].title
                    let badge = userBadge

                    client.say(channel, `@${user.username} ${userTarget}, Banned: ${isbanned}, Partner: ${isPartner}, Affiliate: ${isAffiliate}, Bot: ${isBot}, Badge: ${badge}, Avatar: ${avatar} , Color: ${userColor} (${colorName.name.value}), Account created at ${creationDate}, id: ${uid}, bio: ${bio}`)
                
                
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }
}

    if (message.toLowerCase().startsWith("'firstmessage") || message.toLowerCase().startsWith("'fm")) {
        if (!block) {
    
            let userTarget = user.username;
            if (args[0]) {
                if (args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                userTarget = args[0];
            }
    
            let channelTarget = channel.replace("#", "");
            
            

            let username = user.username;

            if(args[0]) {
                if(args[0].startsWith("@")) {
                    args[0] = args[0].substring(1);
                }
                username = args[0];
            }
            const firstMessage = await got(`https://api.ivr.fi/logs/firstmessage/${channelTarget}/${userTarget}` ,{
                responseType: 'json',
                throwHttpErrors: false
            })
            const userData = firstMessage.body

            const userFirstMessage = userData.message
            const userFirstMessageTime = userData.time
            const error = userData.status
            
            if(!userFirstMessage) {
                const firstMessage1 = await got(`https://api.paauulli.me/logs/firstmessage/${channelTarget}/${userTarget}`,{
                responseType: 'json',
                throwHttpErrors: false
            })
            const userData1 = firstMessage1.body

            const userFirstMessage1 = userData1.text
            const userFirstMessageTime1 = userData1.timestamp

                if(!userFirstMessage1){
                    client.action(channel, 'Channel is not tracked FeelsBadMan')
                    ;return;
                }

                client.action(channel, `${channelTarget}, ${userFirstMessage1} (${userFirstMessageTime1}) `)
                ;return;
            }

                client.action(channel, `${channelTarget}, ${userFirstMessage} (${userFirstMessageTime}) `)
            block = true;
            setTimeout(() => {
                block = false;
            }, (5 * 1000));
        }
    }


        if (message.toLowerCase().startsWith("'followage")  || message.toLowerCase().startsWith("'fa")) {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const followage = await got(`https://decapi.me/twitch/followage/${channelTarget}/${userTarget}?precision=3`); // will return the days too
                let data = followage.body
                
                    if (data === `User not found: ${userTarget}`) {
                        client.action(channel, `${data}`)
                        ;return;
                    }

                client.action(channel, `${userTarget} is following ${channelTarget} for: ${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        


        if (message.toLowerCase().startsWith("'accage")) {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const accage = await got(`https://decapi.me/twitch/accountage/${userTarget}?precision=4`)
                let data = accage.body
        
                client.action(channel, `${userTarget}'s account is ${data} old`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (message.toLowerCase().startsWith("'avatar")) {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const avatar = await got(`https://decapi.me/twitch/avatar/${userTarget}`)
                let data = avatar.body
        
                client.action(channel, `${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }


        if (message.toLowerCase().startsWith("'subs")) {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const subs = await got(`https://decapi.me/twitch/subcount/${channelTarget}?`); 
                let data = subs.body
                client.action(channel, `Channel ${channelTarget} has  ${data} subscribers`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (message.toLowerCase().startsWith("'subemotes")) {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const subemotes = await got(`https://decapi.me/twitch/subscriber_emotes/${channelTarget}?precision=4`); 
                let data = subemotes.body
                    if (data === 'This channel does not have any subscriber emotes. ') {
                        client.action(channel, `This channel does not have any subscriber emotes.`)
                ;return;
                }
                client.action(channel, `${data}`)  
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }


        if (message.toLowerCase().startsWith("'uptime")) {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                
                const uptime = await got(`https://decapi.me/twitch/uptime/${channelTarget}`); 
                let data = uptime.body
                client.action(channel, data)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }



        if (message.toLowerCase().startsWith("'viewers") && command === 'viewers') {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                const viewers = await got(`https://decapi.me/twitch/viewercount/${channelTarget}?`); 
                let data = viewers.body
                client.action(channel, data)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }
        
        if (message.toLowerCase().startsWith("'followers") && command === 'followers') {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                const followers = await got(`https://decapi.me/twitch/followcount/${channelTarget}`); 
                let data = followers.body
                client.action(channel, `${channelTarget} has ${data} followers`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }
        

        if (message.toLowerCase().startsWith("'modlookup")  || message.toLowerCase().startsWith("'ml")) {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
                client.action(channel, `${userTarget} is MOD/VIP in these channels: https://www.twitchdatabase.com/roles/${userTarget}`)
        }
    }

        if (message.toLowerCase().startsWith("'title")) {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const title = await got(`https://decapi.me/twitch/title/${channelTarget}?`); 
                let data = title.body
                
                client.action(channel, `Title is: ${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (message.toLowerCase().startsWith("'uid")) {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const uid = await got(`https://decapi.me/twitch/id/${userTarget}?`); 
                let data = uid.body
                client.action(channel, `${user.username} ${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (message.toLowerCase().startsWith("'game")) {
            if (!block) {
        
        
                let channelTarget = channel.replace("#", "");
                if (args[0]) {
                    channelTarget = args[0];
                }
        
                const game = await got(`https://decapi.me/twitch/game/${channelTarget}?`); 
                let data = game.body
                client.action(channel, `${channelTarget} is currently playing  ${data}`)  
        
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        

        if (message.toLowerCase().startsWith("'subage")  || message =="'sa") {
            if (!block) {
        
                let userTarget = user.username;
                if (args[0]) {
                    if (args[0].startsWith("@")) {
                        args[0] = args[0].substring(1);
                    }
                    userTarget = args[0];
                }
        
                let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }
        
                const bCheck = await got(`https://api.ivr.fi/twitch/resolve/${userTarget}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })

                const cCheck = await got(`https://api.ivr.fi/twitch/resolve/${channelTarget}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })

                let channelCheck = cCheck.body
                let banCheck = bCheck.body

            const channelid = channelCheck.id
            const ban = banCheck.banned

            if (!channelid){
                client.action(channel, 'Channel was not found.')
            ;return;
            }

            if (ban == true){
                client.action(channel, 'No data found. User is probably banned.')
            ;return;
            }



                const subage = await got(`https://api.ivr.fi/twitch/subage/${userTarget}/${channelTarget}`);
                let data = JSON.parse(subage.body)

                console.log(data)

                const tier = data.meta.tier
                const type = data.meta.type
                const months = data.cumulative.months
                const anniversary = data.cumulative.remaining
                const endsin = data.streak.remaining
                const streak = data.streak.months

                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${userTarget}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })

                const userData = userCheck.body

            const userBanned = userData.banned
            const isbanned = userBanned


                if (months == undefined || months == 0){
                    client.action(channel, `${userTarget} isn't subscribed to ${channelTarget}.`)
                ;return;
                }

                if (data.subscribed == false){
                    client.action(channel, `${userTarget} isn't subscribed to ${channelTarget}, but used to be subscribed for ${months} months.`)
                ;return;
                }

            
               if (type == 'gift'){
                    const giftedby = data.meta.gift.name
                    const banned = data.error
                
                    client.action(channel, `User ${userTarget} is subscribed to ${channelTarget} for ${months} cumulative months with tier ${tier} gifted by ${giftedby} and is on ${streak} months streak. Ends in ${endsin} days and next anniversary is in ${anniversary} days.`)
                ;return;
                }

                if (type == 'paid'){
                    const banned = data.error
                    
                    client.action(channel, `User ${userTarget} is subscribed to ${channelTarget} for ${months} cumulative months with tier ${tier} and is on ${streak} months streak. Ends in ${endsin} days and next anniversary is in ${anniversary} days.`)
                ;return;
                }

                if (type == 'prime'){
                    const banned = data.error
  
                    client.action(channel, `User ${userTarget} is subscribed to ${channelTarget} for ${months} cumulative months with tier ${tier} and is on ${streak} months streak. Ends in ${endsin} days and next anniversary is in ${anniversary} days.`)
                ;return;
                }
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

let foodcheck = client.food.get(user['user-id']); 
if (foodcheck) { 
    client.food.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} finished eating üçî: ${foodcheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(foodcheck.time), { round: true })})`)
}
 
if (message.toLowerCase().startsWith("'food")) {
    if (!block) {

        let foodMessage = args.join(' ') ? args.join(' ') : 'no message';
        let foodlist = client.food.get(user['user-id']);
        if (!foodlist) {
            let construct = {
                id: user['user-id'],
                reason: foodMessage,
                time: new Date().toString()
            };
            client.food.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is now eating üçî: ${foodMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

let wccheck = client.wc.get(user['user-id']); 
if (wccheck) { 
    client.wc.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} came back from toilet üöΩ: ${wccheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(wccheck.time), { round: true })})`)
}
 
if (message.toLowerCase().startsWith("'wc")) {
    if (!block) {

        let wcMessage = args.join(' ') ? args.join(' ') : 'no message';
        let wclist = client.wc.get(user['user-id']);
        if (!wclist) {
            let construct = {
                id: user['user-id'],
                reason: wcMessage,
                time: new Date().toString()
            };
            client.wc.set(user['user-id'], construct);

            client.action(channel, `@${user.username} went to a toilet üöΩ: ${wcMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

let brbcheck = client.brb.get(user['user-id']); 
if (brbcheck) { 
    client.brb.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} is back: ${brbcheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(brbcheck.time), { round: true })})`)
}

if (message.toLowerCase().startsWith("'brb")) {
    if (!block) {

        let brbMessage = args.join(' ') ? args.join(' ') : 'ppHop';
        let brblist = client.brb.get(user['user-id']);
        if (!brblist) {
            let construct = {
                id: user['user-id'],
                reason: brbMessage,
                time: new Date().toString()
            };
            client.brb.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is going to be right back: ${brbMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

let gncheck = client.gn.get(user['user-id']); 
if (gncheck) { 
    client.gn.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} just woke up: ${gncheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(gncheck.time), { round: true })})`)
}

if (message.toLowerCase().startsWith("'gn")) {
    if (!block) {

        let gnMessage = args.join(' ') ? args.join(' ') : 'üõè üí§ ';
        let gnlist = client.gn.get(user['user-id']);
        if (!gnlist) {
            let construct = {
                id: user['user-id'],
                reason: gnMessage,
                time: new Date().toString()
            };
            client.gn.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is now sleeping : ${gnMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

let showercheck = client.shower.get(user['user-id']); 
if (showercheck) { 
    client.shower.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} finished showering üöø : ${showercheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(showercheck.time), { round: true })})`)
}

if (message.toLowerCase().startsWith("'shower")) {
    if (!block) {

        let showerMessage = args.join(' ') ? args.join(' ') : 'no message';
        let showerlist = client.shower.get(user['user-id']);
        if (!showerlist) {
            let construct = {
                id: user['user-id'],
                reason: showerMessage,
                time: new Date().toString()
            };
            client.shower.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is now showering üöø : ${showerMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}

if(message == "'bruh"){
    if (!block) {
    client.action(channel, 'Bruh')
    block = true;
    setTimeout(() => {
        block = false;
    }, (5 * 1000));
}
}

let afkcheck = client.afk.get(user['user-id']); 
if (afkcheck) { 
    client.afk.delete(user['user-id']); 
    client.action(channel, `${user['display-name']} is no longer afk: ${afkcheck.reason} (${humanizeDuration(new Date().getTime() - Date.parse(afkcheck.time), { round: true })})`)
}



if (message.toLowerCase().startsWith("'afk")) {
    if (!block) {

        let afkMessage = args.join(' ') ? args.join(' ') : 'no message';
        let afklist = client.afk.get(user['user-id']);
        if (!afklist) {
            let construct = {
                id: user['user-id'],
                reason: afkMessage,
                time: new Date().toString()
            };
            client.afk.set(user['user-id'], construct);

            client.action(channel, `@${user.username} is afk: ${afkMessage}`)
        }

        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}







if (message.toLowerCase().startsWith("'tuck")) {

    let channelTarget = channel.replace("#", "");

    const got = require("got");

    const data = await got(`https://emotes.adamcy.pl/v1/channel/${channelTarget}/emotes/7tv.bttv.ffz.twitch`);
    
    let emotes = [];
    
    JSON.parse(data.body).map((e) => {
      emotes.push(e.code);
    });
    
    

    let userTarget = user.username;
    if (args[0]) {
        if (args[0].startsWith("@")) {
            args[0] = args[0].substring(1);
        }
        userTarget = args[0];
    }

    if (emotes.includes(args[1])) {
        client.action(channel, `@${user.username} tucked ${userTarget} to bed ${args[1]} üëâ üõè`)
    }  else {

       if (userTarget == user.username){
            client.say(channel, `@${user.username} tucked himself to bed Sadge üëâ üõè `)
        ;return; 
        }
 
        client.action(channel, `@${user.username} tucked ${userTarget} to bed FeelsOkayMan üëâ üõè `)
    }
}

if (isModUp || user['user-id'] == '162760707') {
if (message.toLowerCase().startsWith("'allemotes")) {
    if (!block) {
    let channelTarget = channel.replace("#", "");

    const got = require("got");

const data = await got(`https://emotes.adamcy.pl/v1/channel/${channelTarget}/emotes/7tv.bttv.ffz.twitch`);
let emotes = [];

JSON.parse(data.body).map((e) => {
  emotes.push(e.code);
});

client.say(channel, `${emotes.join(" ")}`)
        block = true;
        setTimeout(() => {
        block = false;
    }, (5 * 1000));
}   
}
}


if(message.toLowerCase().startsWith("'rcolor") && command === 'rcolor') {
    if (!block) {
        var color = "";
    for(var i = 0; i < 3; i++) {
        var sub = Math.floor(Math.random() * 256).toString(16);
        color += (sub.length == 1 ? "0" + sub : sub);
    }
    const colorName = await got(`https://www.thecolorapi.com/id?hex=${color.replace('#', '')}`).json();

    client.action(channel, `${colorName.name.value} #${color}`);
    block = true;
    setTimeout(() => {
        block = false;
    }, (5 * 1000));
}
};

if(message.startsWith(`'math`)){
    if(message.split(" ")[1] !== undefined){
        let excersise = message.substring(message.split(" ")[0].split("").length +1, message.split("").length)
      excersise = excersise.replace(/\s/g, "")
      let validnums = 0
      let invalidnums = 0
      for(w = 0; w < excersise.length; w++){
        let numchar = excersise.split("")[i]
        if(!isNaN(numchar)){
          validnums = +validnums+1
        } else {
          invalidnums = +invalidnums+1
        }
      }
        let excersisesolved = eval(excersise)
        if(excersisesolved !== isNaN){
            client.action(channel, `${user.username} ${excersisesolved} FeelsOkayMan`)
        }
        else {
            client.action(channel, `${user.username} Not mathematical! FeelsDankMan`)
            
        } 
    }  
}

if (channel === '#pajlada') {
    if (!block) {
    if(message == "monkaStop ALARM" && user['user-id'] === "670591988") {
        client.action(channel, 'pajaGIGA üö® ALERT')
        block = true;
        setTimeout(() => {
            block = false;
        }, (5 * 1000));
    }
}
}

  if(message.toLowerCase().startsWith("'broadcaster") && command === 'broadcaster') {
        if (!block) {
            let channelTarget = channel.replace("#", "");
                if (args[1]) {
                    channelTarget = args[1];
                }    
            
                client.action(channel, `${channelTarget}`)
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));
            }
        }

        if (isModUp) {
            if (message.toLocaleLowerCase().startsWith("'settitle") && channel === '#meiiodaas') {
                
                let channelTarget = channel.replace("#", "");

                const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${channelTarget}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })

                let id = userCheck.body.id


        let patch = await got.patch(`https://api.twitch.tv/helix/channels?broadcaster_id=162760707`, {
            headers: { "Authorization": `Bearer ${process.env.app_oauth}`, "Client-ID": `${process.env.client_id}`, "Content-type": 'application/json' },
            body: JSON.stringify({ "title": `${args.join(" ")}` })
        });
        
        client.action(channel, `title changed to "${args.join(" ")}"`)
    }
}

if (isModUp) {
    if (message.toLocaleLowerCase().startsWith("'setgame") && channel === '#meiiodaas') {
const game = args.join(" ")

let channelTarget = channel.replace("#", "");

const userCheck = await got(`https://api.ivr.fi/twitch/resolve/${channelTarget}`,{
                    responseType: 'json',
                    throwHttpErrors: false
                })

let id = userCheck.body.id

const getID = await got(`https://api.twitch.tv/helix/games?name=${game}`, {
  headers: { "Authorization": `Bearer ${process.env.app_oauth}`, "Client-ID": `${process.env.client_id}` },
  responseType: "json"
});
const gameID = getID.body

if (gameID.data.length == 0) {
    client.action(channel, `I couldn't find this game...`) 
;return;
}

let patch = await got.patch(`https://api.twitch.tv/helix/channels?broadcaster_id=162760707`, { headers: { "Authorization": `Bearer ${process.env.app_oauth}`, "Client-ID": `${process.env.client_id}`, "Content-type": 'application/json' }, body: JSON.stringify({ "game_id": `${gameID.data[0].id}` }) })

client.action(channel, `game changed to "${gameID.data[0].name}"`)
}
}



if (message.toLowerCase().startsWith("'song")) {
    if (!block) {
const SpotifyWebApi = require('spotify-web-api-node');
const spotify = require('spotify-token');
 
const Updater = require("spotify-oauth-refresher");
const api = new Updater({ clientId: `${process.env.clientId}`, clientSecret: `${process.env.clientSecret}` });

api.setAccessToken(`${process.env.accessToken}`);
api.setRefreshToken(`${process.env.refreshToken}`);


const me = await api.request({
      url: "https://api.spotify.com/v1/me/player/currently-playing",
      method: "get",
      authType: "bearer",
    });
    
    console.log(me.config.headers.Authorization);
        
    
        let spotify_song = {
            method: "GET",
              headers: {
              "Accept" : "application/json",
              "Content-Type" : "application/json",
              "Authorization" : `${me.config.headers.Authorization} `
              }
            }
        
            const request = require('request')
          request(`https://api.spotify.com/v1/me/player/currently-playing`, spotify_song, function(e, r){
            if(e){
              client.say(channel, `monkaS error`)
              console.log(`>> ERROR ${e}`)
            } else {
              if(r.body.length < 60){
                client.action(channel, "Nothing is playing on MeIiodaas's spotify")
              } else {
                let dat = JSON.parse(r.body)
                let data = r

                const format = require('format-duration')

                let test = (data.body)

                let artists = {};
                
                console.log(dat)

                JSON.parse(data.body.item).map((e) => {
                    artists.push(e.name);
                  });

                

                


                const progress_ms = format(dat.progress_ms)
                const duration_ms = format(dat.item.duration_ms)
            const paused = dat.is_playing

            if (dat.is_playing ==  false) {
                client.action(channel, "Nothing is playing on MeIiodaas's spotify")
                ;return;
            }

            client.action(channel, `MeIiodaas is currently playing ${dat.item.name} by ${artists.join("")} ‚ñ∂ [${progress_ms}/${duration_ms}] ${dat.item.external_urls.spotify}`)
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000));  
           }
        }
     })
  }
}
    


if (message.toLowerCase().startsWith("'weather") && command === 'weather'){
    if (!block) {
    const weather = require('openweather-apis');
    const Compass = require("cardinal-direction");
    const hdate = require('human-date');
    const moment = require('moment');
    const kelvinToCelsius = require('kelvin-to-celsius');

    weather.setLang('en');
	
	weather.setCity(`${args.join(" ")}`);

    weather.setUnits('metric');

 	weather.setAPPID(process.env.weather_api_token);



     const data = await got(`https://api.openweathermap.org/data/2.5/weather?q=${args.join(" ")}&APPID=${process.env.weather_api_token}`,{
        responseType: 'json',
        throwHttpErrors: false
    })

    let JSONObj = data.body
        console.log(JSONObj)
        
        if(JSONObj.cod == 400) {
            client.action(channel, 'No city found :)')
        ;return;
        }

        if(JSONObj.cod == 429) {
            client.action(channel, 'No city found :)')
        ;return;
        }

        if(JSONObj.cod == 500) {
            client.action(channel, 'No city found :)')
        ;return;
        }

        if(JSONObj.cod == 502) {
            client.action(channel, 'No city found :)')
        ;return;
        }

        if(JSONObj.cod == 503) {
            client.action(channel, 'No city found :)')
        ;return;
        }

        if(JSONObj.cod == 504) {
            client.action(channel, 'No city found :)')
        ;return;
        }

        if(JSONObj.cod == 404) {
            client.action(channel, 'No city found :)')
        ;return;
        }

        const direction = Compass.cardinalFromDegree(JSONObj.wind.deg)

        let unix_timestamp = JSONObj.sys.sunrise

        var locationTime = new Date(unix_timestamp * 1000);
        var currentTime = Date.now() 
        var SunRiseTime = locationTime - currentTime

        var date = new Date(SunRiseTime);
        var hours = date.getHours();
        var minutes = "0" + date.getMinutes();
        var seconds = "0" + date.getSeconds();
        
        var SunRise = hours + 'h' + minutes.substr(-2) + 'm';
        
   

        let unix_timestamp2 = JSONObj.sys.sunset

        var locationTime2 = new Date(unix_timestamp2 * 1000);
        var currentTime2 = Date.now() 
        var SunSetTime = locationTime2 - currentTime2

        var date2 = new Date(SunSetTime);
        var hours2 = date2.getHours();
        var minutes2 = "0" + date2.getMinutes();
        var seconds2 = "0" + date2.getSeconds();
        
        var SunSet = hours2 + 'h' + minutes2.substr(-2) + 'm';

            if(JSONObj.wind.gust == null){
                client.action(channel, `${JSONObj.name}, ${JSONObj.sys.country}: ${kelvinToCelsius(JSONObj.main.temp)}¬∞C, feels like ${kelvinToCelsius(JSONObj.main.feels_like)}¬∞C. Weather: ${JSONObj.weather[0].description}. ${direction} Wind speed: ${JSONObj.wind.speed} m/s. Humadity: ${JSONObj.main.humidity}%. Air pressure: ${JSONObj.main.pressure} hPa. Sun rises in ${SunRise}, sunset in ${SunSet}.  `)
            ;return;
            }

        client.action(channel, `${JSONObj.name}, ${JSONObj.sys.country}: ${kelvinToCelsius(JSONObj.main.temp)}¬∞C, feels like ${kelvinToCelsius(JSONObj.main.feels_like)}¬∞C. Weather: ${JSONObj.weather[0].description}. ${direction} Wind speed: ${JSONObj.wind.speed} m/s. Wind gusts up to ${JSONObj.wind.gust} m/s. Humadity: ${JSONObj.main.humidity}%. Air pressure: ${JSONObj.main.pressure} hPa. Sun rises in ${SunRise}, sunset in ${SunSet}.  `)
                block = true;
                setTimeout(() => {
                    block = false;
                }, (5 * 1000)); 
   } 
}
	


 if (message.toLowerCase().startsWith("'eval") && command === 'eval'){ 
    const evalueted = await eval('(async () => {' + args.join(" ") + '})()')
    const ev = String(evalueted) || ''
      client.say(channel, ev)
}



});

